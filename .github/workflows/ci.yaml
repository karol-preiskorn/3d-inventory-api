name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '22.x'

jobs:
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run dependency check
        run: npm run check:depcheck
        continue-on-error: true

  lint-and-test:
    name: Lint, Type Check & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier check
        run: npm run prettier

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run check:type

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security, lint-and-test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate documentation
        run: npm run doc

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 30

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ github.sha }}
          path: docs/
          retention-days: 30

  docker-build:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Build Docker image
        run: |
          docker build -t 3d-inventory-api:${{ github.sha }} .
          docker tag 3d-inventory-api:${{ github.sha }} 3d-inventory-api:latest

      - name: Test Docker image
        run: |
          # Start container in background
          docker run --rm -d --name test-container -p 8080:8080 \
            -e NODE_ENV=production \
            -e PORT=8080 \
            -e HOST=0.0.0.0 \
            -e ATLAS_URI=mongodb://localhost:27017 \
            -e DBNAME=test \
            -e JWT_SECRET=test-secret-key-for-testing \
            3d-inventory-api:latest

          # Wait for container to start
          sleep 15

          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1

          # Show logs for debugging
          docker logs test-container

          # Stop container
          docker stop test-container

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '3d-inventory-api:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

name: CI - Continuous Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Run TypeScript type check
        run: npm run check:type

      - name: Run unit tests (fast mode)
        run: |
          # Use simplified Jest configuration for faster, more reliable tests
          npx jest --config=jest.config.simple.ts --ci --coverage --maxWorkers=2
        env:
          NODE_ENV: test
          ATLAS_URI: ${{ secrets.MONGODB_URI || 'mongodb://localhost:27017' }}
          DBNAME: 3d-inventory-test
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage summary
        if: always()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const total = coverage.total;
              console.log('| Metric | Coverage |');
              console.log('|--------|----------|');
              console.log(\`| Statements | \${total.statements.pct}% |\`);
              console.log(\`| Branches | \${total.branches.pct}% |\`);
              console.log(\`| Functions | \${total.functions.pct}% |\`);
              console.log(\`| Lines | \${total.lines.pct}% |\`);
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check coverage threshold
        run: |
          # Ensure coverage meets minimum threshold
          npx jest --config=jest.config.simple.ts --coverage --coverageThreshold='{"global":{"statements":70,"branches":65,"functions":70,"lines":70}}'

  database-tests:
    name: Database Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database tests
        run: |
          # Run database-specific tests with simplified config
          npm test -- src/tests/db.utils.test.ts src/tests/db.advanced.test.ts src/tests/connection.db.test.ts --runInBand
        env:
          NODE_ENV: test
          ATLAS_URI: ${{ secrets.MONGODB_URI || 'mongodb://localhost:27017' }}
          DBNAME: 3d-inventory-test

  test-pattern-validation:
    name: Validate Test Patterns
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for problematic test patterns
        run: |
          echo "🔍 Checking for jest.doMock() pattern..."
          if grep -r "jest\.doMock" src/tests/*.test.ts 2>/dev/null; then
            echo "❌ Found jest.doMock() in test files!"
            echo "This pattern causes test hanging issues."
            echo "Please use jest.mock() at the top level instead."
            echo "See docs/JEST-MONGODB-TESTING-GUIDE.md for proper patterns."
            exit 1
          fi
          echo "✅ No problematic jest.doMock() patterns found"

          echo "🔍 Checking for dynamic imports in tests..."
          if grep -r "await import(" src/tests/*.test.ts 2>/dev/null | grep -v "\/\/" | grep -v "\/\*"; then
            echo "⚠️ Found dynamic imports in test files"
            echo "This may cause performance issues or test hanging"
            echo "Consider using static imports instead."
          else
            echo "✅ No problematic dynamic imports found"
          fi

  security-check:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate || {
            echo "⚠️ Security vulnerabilities detected"
            echo "Consider running 'npm audit fix' to resolve issues"
            exit 0  # Don't fail CI for security issues, just warn
          }

  performance-check:
    name: Test Performance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Measure test execution time
        run: |
          echo "## Test Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          START_TIME=$(date +%s)
          npm test -- --testNamePattern="Database Utils" --verbose 2>&1 | tee test-output.log
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "| Test Suite | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Database Utils | ${DURATION}s |" >> $GITHUB_STEP_SUMMARY

          # Warn if tests are taking too long
          if [ $DURATION -gt 30 ]; then
            echo "⚠️ Tests are taking longer than 30 seconds" >> $GITHUB_STEP_SUMMARY
            echo "Consider optimizing slow tests" >> $GITHUB_STEP_SUMMARY
          fi

  all-tests-complete:
    name: All Tests Complete
    runs-on: ubuntu-latest
    needs: [test, database-tests, test-pattern-validation, security-check]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          if [ "${{ needs.database-tests.result }}" != "success" ]; then
            echo "❌ Database tests failed"
            exit 1
          fi
          if [ "${{ needs.test-pattern-validation.result }}" != "success" ]; then
            echo "❌ Test pattern validation failed"
            exit 1
          fi
          echo "✅ All tests passed successfully!"

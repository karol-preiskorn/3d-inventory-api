name: Deploy to Google Cloud

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  GCP_REGION: us-central1
  SERVICE_NAME: 3d-inventory-api
  REGISTRY: us-central1-docker.pkg.dev

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  deploy:
    name: Deploy to GCP Cloud Run
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: ${{ inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Determine image tag
        id: image_tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Check if image exists
        id: check_image
        run: |
          IMAGE_URI="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/3d-inventory/3d-inventory-api:${{ steps.image_tag.outputs.tag }}"
          if gcloud artifacts docker images describe $IMAGE_URI --quiet; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            # Fallback to latest if specific tag doesn't exist
            IMAGE_URI="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/3d-inventory/3d-inventory-api:latest"
            echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          fi

      - name: Build and push image (if not exists)
        if: steps.check_image.outputs.exists == 'false'
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/3d-inventory/3d-inventory-api:${{ steps.image_tag.outputs.tag }}"
          IMAGE_LATEST="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/3d-inventory/3d-inventory-api:latest"

          docker build \
            --build-arg NODE_ENV=production \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            -t $IMAGE_TAG \
            .

          docker tag $IMAGE_TAG $IMAGE_LATEST
          docker push $IMAGE_TAG
          docker push $IMAGE_LATEST

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ steps.check_image.outputs.image_uri }}
          region: ${{ env.GCP_REGION }}
          env_vars: |
            NODE_ENV=production
            PORT=8080
            HOST=0.0.0.0
            ENVIRONMENT=${{ inputs.environment || 'production' }}
          secrets: |
            ATLAS_URI=atlas-uri:latest
            DBNAME=dbname:latest
            JWT_SECRET=jwt-secret:latest
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=100
            --timeout=300
            --port=8080
            --execution-environment=gen2
          tag: ${{ steps.image_tag.outputs.tag }}

      - name: Health check
        id: health_check
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f -s "$SERVICE_URL/health" > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            fi

            if [ $i -eq 30 ]; then
              echo "❌ Health check failed after 30 attempts"
              exit 1
            fi

            echo "⏳ Health check failed, retrying in 10s (attempt $i/30)"
            sleep 10
          done

      - name: Run smoke tests
        run: |
          SERVICE_URL="${{ steps.health_check.outputs.service_url }}"

          # Test API endpoints
          echo "Testing API endpoints..."

          # Test health endpoint
          if ! curl -f -s "$SERVICE_URL/health"; then
            echo "❌ Health endpoint failed"
            exit 1
          fi

          # Test documentation endpoint
          if ! curl -f -s "$SERVICE_URL/doc" > /dev/null; then
            echo "⚠️ Documentation endpoint not accessible"
          fi

          echo "✅ Smoke tests passed"

      - name: Update traffic allocation
        if: success() && !inputs.force_deploy
        run: |
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --to-revisions=${{ steps.image_tag.outputs.tag }}=100

      - name: Create deployment notification
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const environment = '${{ inputs.environment || 'production' }}';
            const serviceUrl = '${{ steps.health_check.outputs.service_url }}';
            const imageTag = '${{ steps.image_tag.outputs.tag }}';

            const title = status === 'success'
              ? `✅ Deployment to ${environment} successful`
              : `❌ Deployment to ${environment} failed`;

            const body = `
            **Environment:** ${environment}
            **Image Tag:** \`${imageTag}\`
            **Service URL:** ${serviceUrl}
            **Status:** ${status}
            **Commit:** ${{ github.sha }}
            **Actor:** @${{ github.actor }}
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', environment, status]
            });

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && !inputs.force_deploy

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Rollback to previous revision
        run: |
          # Get previous successful revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --filter="status.conditions.type=Ready AND status.conditions.status=True" \
            --sort-by="~metadata.creationTimestamp" \
            --limit=2 \
            --format="value(metadata.name)" | tail -n 1)

          if [ -n "$PREVIOUS_REVISION" ]; then
            echo "Rolling back to revision: $PREVIOUS_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.GCP_REGION }} \
              --to-revisions=$PREVIOUS_REVISION=100

            echo "✅ Rollback completed successfully"
          else
            echo "❌ No previous revision found for rollback"
            exit 1
          fi

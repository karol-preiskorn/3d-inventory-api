openapi: 3.0.3
info:
  title: API for project 3d-inventory
  description: |-
    API **3d-inventory**. Project is a simple solution that allows you to build a spatial and database representation of all types of warehouses and server rooms.
    ### Responses
    From [restfulapi.net site](https://restfulapi.net/http-status-codes)
    - 1xx Informational – Communicates transfer protocol-level information.
    - 2xx Success – Indicates that the client’s request was accepted successfully.
    - 3xx Redirection – Indicates that the client must take some additional action in order to complete their request.
    - 4xx Client Error – This category of error status codes points the finger at clients.
    - 5xx Server Error – The server takes responsibility for these error status codes.
  version: 0.0.6
  contact:
    name: 3d-inventory
    url: 'https://github.com/karol-preiskorn/3d-inventory-mongo-api/discussions'
    email: h5xwmtlfp@mozmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/karol-preiskorn/3d-inventory-rest-api/0.0.6'
  - description: localhost api 3d-inventory-oracle-api
    url: 'http://localhost:3000'
paths:
  /devices:
    get:
      operationId: deviceGET
      summary: Get all devices
      description: List all devices.
      responses:
        '200':
          description: List of devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Devices'
        '404':
          description: Devices not found
      tags:
        - devices
    put:
      operationId: devicePUT
      summary: Update device
      description: Update existing device.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: Update not found device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - devices
    post:
      operationId: devicePOST
      summary: Create new device
      description: Insert new device.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
            example:
              $ref: '#/components/schemas/Device/example'
      responses:
        '200':
          description: A devices id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: The device ID.
                    type: string
                    format: uuid
        '500':
          description: Error device not created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - devices
    delete:
      operationId: deviceDELETE
      summary: Delete all devices
      description: Delete device.
      responses:
        '200':
          description: OK
        '404':
          description: Not found device to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - devices
  '/devices/{id}':
    get:
      operationId: deviceGetOne
      summary: Get devices
      description: Get one devices.
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: Devices not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
      tags:
        - devices
    delete:
      operationId: deviceDeleteOne
      summary: Delete selected devices
      description: Delete one device.
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Not found device to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - devices
  /logs:
    get:
      operationId: logsGET
      summary: Get logs from database
      description: Get all logs.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
              example:
                $ref: '#/components/schemas/Logs/example'
        '404':
          description: No found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/404'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
      tags:
        - logs
    put:
      operationId: logPUT
      summary: Update new log
      description: Update log record.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
    post:
      operationId: logPOST
      summary: Insert new log
      description: Create log.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
              example:
                $ref: '#/components/schemas/Log/example'
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '500':
          description: Error log not created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
              example:
                $ref: '#/components/responses/500'
      tags:
        - logs
    delete:
      operationId: logAllDelete
      summary: Delete log
      description: Delete all or specific id log.
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
  '/logs/{id}':
    delete:
      operationId: logSingleDelete
      summary: Delete single log
      description: Delete specific id log.
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
    get:
      operationId: logSingleGet
      summary: Get single log id
      description: Get specific id log.
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
  '/logs/device/{id}':
    delete:
      operationId: logDeviceDelete
      summary: Delete devices log
      description: Delete specific device log.
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
    get:
      operationId: logDeviceGet
      summary: Get device log
      description: Get specific device log.
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
  '/logs/connection/{id}':
    delete:
      operationId: logConnectionDelete
      summary: Delete devices logs
      description: Delete specific device logs.
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
    get:
      operationId: logConnectionGet
      summary: Get connection logs
      description: Get specific connection logs.
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error logs not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
  '/logs/attributes/{id}':
    delete:
      operationId: logAttributesDelete
      summary: Delete attributes logs
      description: Delete specific device logs.
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
    get:
      operationId: logAttributesGet
      summary: Get attributes logs
      description: Get specific attribute logs.
      parameters:
        - name: id
          in: path
          description: ID of attribute to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/200'
      tags:
        - logs
  '/logs/attribute-dictionary/{id}':
    delete:
      operationId: logAttributeDictionaryDelete
      summary: Delete attribute-dictionary logs
      description: Delete specific attribute-dictionary logs.
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
    get:
      operationId: logAttributeDictionaryGet
      summary: Get attribute-dictionary logs
      description: Get specific attribute-dictionary logs.
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error logs not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
      tags:
        - logs
  /connections:
    get:
      operationId: connectionsGet
      summary: Server heartbeat operation. Get information about connection between Devices.
      description: Get all connections between devices
      responses:
        '200':
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
      tags:
        - connections
    put:
      operationId: connectionPUT
      summary: Update new connection beetween two devices
      description: Create connection beetween two devices. Two id and attributes from attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connections'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
              example:
                $ref: '#/components/schemas/Connection/example'
        '404':
          description: Not found connection data
          content:
            application/json:
              schema:
                $ref: '#/components/responses/404'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
              example:
                $ref: '#/components/responses/500'
      tags:
        - connections
    delete:
      operationId: connectionDELETE
      summary: Delete connection
      description: Delete connection beetween two devices. Two id and attributes from attributes.
      responses:
        '200':
          description: Ok
        '404':
          description: Not found connection to detete
          content:
            application/json:
              schema:
                $ref: '#/components/responses/404'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
              example:
                $ref: '#/components/responses/500'
      tags:
        - connections
    post:
      operationId: connectionPOST
      summary: Create new connection beetween two devices
      description: Create connection beetween two devices. Two id and attributes from attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connections'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
              example:
                $ref: '#/components/schemas/Connection/example'
        '404':
          description: Not found connection data
          content:
            application/json:
              schema:
                $ref: '#/components/responses/404'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
              example:
                $ref: '#/components/responses/500'
      tags:
        - connections
  '/connections/{id}':
    get:
      operationId: connectionGet
      summary: Get information about one Connection.
      description: Connection between devices
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
      tags:
        - connections
    delete:
      operationId: connectionDelete
      summary: Delete connections logs
      description: Delete specific connections logs.
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
      tags:
        - connections
  '/connections/device/{id}':
    get:
      operationId: connectionsDeviceGet
      summary: Get information about Connections between Devices.
      description: Get connection for device
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
      tags:
        - connections
  /attributes:
    get:
      summary: Get all atributtes
      description: 3d-inventory attributes from dictionary atributes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attributes'
              example:
                $ref: '#/components/schemas/Attributes/example'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributes
    post:
      summary: Create new Atributtes
      description: 3d-inventory attributes from dictionary atributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributes
    put:
      operationId: attributesPut
      summary: Update new Atributtes beetween two devices
      description: Create Atributtes beetween two devices. Two id and attributes from attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributes
    delete:
      operationId: attributesDelete
      summary: Update new Atributtes beetween two devices
      description: Create Atributtes beetween two devices. Two id and attributes from attributes.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributes
  '/attributes/device/{id}':
    get:
      operationId: attributesDeviceGet
      summary: Get all atributtes for device
      description: 3d-inventory attributes from dictionary atributes
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributes
  '/attributes/model/{id}':
    get:
      operationId: attributesModelGet
      summary: Get all atributtes for model id
      description: 3d-inventory attributes from dictionary atributes
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributes
  /attribute-dictionary:
    get:
      operationId: attributeDictionaryGet
      summary: Get information about devices attributes types.
      description: Dictionary attributes types for device and models. Store information about extra parmaeters.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDictionaries'
              example:
                $ref: '#/components/schemas/AttributeDictionaries/example'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
    post:
      operationId: attributeDictionaryPost
      summary: Create devices attributes types.
      description: 3d-inventory attributes from dictionary atributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDictionary'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
    put:
      operationId: attributeDictionaryPut
      summary: Update new atributte-dictionary
      description: Create attribute-dictionary beetween two devices. Two id and attributes from attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDictionary'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
    delete:
      operationId: attributeDictionaryDelete
      summary: Delete all attributeDictionary
      description: Create Atributtes beetween two devices. Two id and attributes from attributes.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
  /attribute-dictionary/connection:
    get:
      operationId: attributeDictionaryConnectionGet
      summary: Get information about devices attributes for connection.
      description: Dictionary attributes dictionary for connection.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
  /attribute-dictionary/models:
    get:
      operationId: attributeDictionaryModelsGet
      summary: Get information about devices attributes for models.
      description: Dictionary attributes dictionary for models.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
  /attribute-dictionary/devices:
    get:
      operationId: attributeDictionaryDevicesGet
      summary: Get information about devices attributes for models.
      description: Dictionary attributes dictionary for models.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
  /attribute-dictionary/connections:
    get:
      operationId: attributeDictionaryConnectionsGet
      summary: Get information about devices attributes for connections.
      description: Dictionary attributes dictionary for connections.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - attributeDictionary
  /models:
    get:
      operationId: modelsGet
      summary: Devices models
      description: Dictionary models of device.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models'
              example:
                $ref: '#/components/schemas/Models/example'
      tags:
        - models
    post:
      operationId: modelsPost
      summary: Create devices attributes types.
      description: Create dictionary models of device.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - models
    put:
      operationId: modelsPut
      summary: Update model
      description: Update single model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - models
    delete:
      operationId: modelsDelete
      summary: Delete all models
      description: Delete all models
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - models
  '/model/{id}':
    get:
      operationId: modelGet
      summary: Get model
      description: Dictionary models of device.
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Floors'
      tags:
        - models
  /floors:
    get:
      operationId: floorsGet
      summary: Floors
      description: Floors data and atributes
      responses:
        '200':
          description: OK
      tags:
        - floors
    post:
      operationId: floorPost
      summary: Create devices attributes types.
      description: 3d-inventory attributes from dictionary atributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Floor'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - floors
    put:
      operationId: floorPut
      summary: Update new atributte-dictionary
      description: Create attribute-dictionary beetween two devices. Two id and attributes from attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Floor'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - floors
    delete:
      operationId: floorDelete
      summary: Delete all attribute-dictionary
      description: Create Atributtes beetween two devices. Two id and attributes from attributes.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - floors
  '/floors/{id}':
    get:
      operationId: floorIdGet
      summary: Get the single floor
      description: Get single foor
      parameters:
        - name: id
          in: path
          description: ID of foor to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Floor'
      tags:
        - floors
components:
  schemas:
    Floor:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        adress:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            country:
              type: string
            postcode:
              type: string
        array:
          type: object
          properties:
            description:
              type: string
            x:
              type: number
            'y':
              type: number
            h:
              type: number
            xPos:
              type: number
            yPos:
              type: number
            hPos:
              type: number
    Floors:
      description: Array of Floors
      type: array
      items:
        $ref: '#/components/schemas/Floors'
      example: null
    Dimension:
      type: object
      properties:
        depth:
          type: number
        height:
          type: number
        width:
          type: number
      example:
        width: '1'
        height: '2'
        depth: '2'
    Texture:
      type: object
      properties:
        back:
          type: string
          format: ss
        botom:
          type: string
        front:
          type: string
        side:
          type: string
        top:
          type: string
      example:
        front: /assets/r710-2.5-nobezel__29341.png
        back: /assets/r710-2.5-nobezel__29341.png
        side: /assets/r710-2.5-nobezel__29341.png
        top: /assets/r710-2.5-nobezel__29341.png
        botom: /assets/r710-2.5-nobezel__29341.png
    Model:
      type: object
      properties:
        _id:
          type: string
          format: Realm.BSON.ObjectId
        category?:
          type: string
        dimension:
          $ref: '#/components/schemas/Dimension'
        name:
          type: string
        texture:
          $ref: '#/components/schemas/Texture'
        type:
          type: string
      example:
        _id: 653e1059d6025afb66017c63
        name: Model 1
        dimension:
          width: '1'
          height: '2'
          depth: '2'
        texture:
          front: /assets/r710-2.5-nobezel__29341.png
          back: /assets/r710-2.5-nobezel__29341.png
          side: /assets/r710-2.5-nobezel__29341.png
          top: /assets/r710-2.5-nobezel__29341.png
          botom: /assets/r710-2.5-nobezel__29341.png
        type: CoolAir
        category: Facility
      required:
        - _id
        - name
        - type
        - category
    Models:
      description: Array of Connections
      type: array
      items:
        $ref: '#/components/schemas/Model'
      example: null
    AttributeDictionary:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        category:
          type: string
        component:
          type: string
          enum:
            - Devices
            - Models
            - Attrtibutes
            - AttributesDictionary
            - Connections
            - Floors
      example:
        _id: 653e10ecd6025afb66017c65
        name: MaxAmount
        type: ''
        category: ''
        component: b324c94f-58a7-4e2e-a566-207024cb3485
      required:
        - _id
        - name
        - type
        - category
        - component
    AttributeDictionaries:
      description: List of Attribute Dictionary
      type: array
      items:
        $ref: '#/components/schemas/AttributeDictionary'
      example:
        - _id: 653e10ecd6025afb66017c65
          name: MaxAmount
          type: ''
          category: ''
          component: b324c94f-58a7-4e2e-a566-207024cb3485
        - _id: 653e10ecd6025afb66017c65
          name: MaxAmount
          type: ''
          category: ''
          component: b324c94f-58a7-4e2e-a566-207024cb3485
    Attribute:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        deviceId:
          type: string
          format: uuid
        modelId:
          type: string
          format: uuid
        connectionId:
          type: string
          format: uuid
        attributeDictionaryId:
          type: string
          format: uuid
        value:
          type: string
      example:
        _id: 653e10ecd6025afb66017c65
        deviceId: be5bb617-a614-435f-bf66-8768d0aba0c8
        modelId: ''
        connectionId: ''
        attributeDictionaryId: b324c94f-58a7-4e2e-a566-207024cb3485
        value: '2'
      required:
        - _id
        - attributeDictionaryId
        - value
    Attributes:
      description: List of attributes
      type: array
      items:
        $ref: '#/components/schemas/Attribute'
      example:
        - _id: 653e10ecd6025afb66017c65
          deviceId: be5bb617-a614-435f-bf66-8768d0aba0c8
          modelId: ''
          connectionId: ''
          attributeDictionaryId: b324c94f-58a7-4e2e-a566-207024cb3485
          value: '2'
        - _id: 1234erdsfdasdasdasd17c65
          deviceId: be5basd7-a614-435f-bf66-8768d0aba0c8
          modelId: be5basd7-a614-435f-bfas-8768d0asdasd
          connectionId: ''
          attributeDictionaryId: ''
          value: '2'
    Position:
      description: Position device on the floor
      type: object
      properties:
        x:
          description: Width
          type: number
        'y':
          description: Depht
          type: number
        h:
          description: Height
          type: number
      required:
        - x
        - 'y'
        - h
    Device:
      description: Device it is basic structure 3d-inventory
      type: object
      properties:
        _id:
          description: Device ObjectId
          type: string
        name:
          description: Device name
          type: string
        modelId:
          description: Device model ObjectId
          type: string
        position:
          $ref: '#/components/schemas/Position'
      example:
        _id: 653d6b95a75c2fa12566815c
        name: Device 2 (new2)
        position:
          x: '4'
          'y': '3'
          h: '0'
        modelId: 653e1059d6025afb66017c63
      required:
        - _id
        - name
        - modelId
    Devices:
      description: Array of Devices
      type: array
      items:
        $ref: '#/components/schemas/Device'
    Connection:
      description: Single Connection betweend two devices deviceIdFrom to deviceIdTo
      type: object
      properties:
        _id:
          description: Connection id uuid
          type: string
        name:
          description: Connection name
          type: string
        deviceIdTo:
          description: Connection to
          type: string
          format: uuid
        deviceIdFrom:
          description: Connection from
          type: string
          format: uuid
      example:
        _id: 91601de6-6e93-11ed-a1eb-0242ac120002
        name: device-A1
        deviceIdFrom: 5f8abd81-0d35-47c4-8277-3d6bbbe185f0
        deviceIdTo: be5bb617-a614-435f-bf66-8768d0aba0c8
      required:
        - _id
        - name
        - deviceIdTo
        - deviceIdFrom
    Connections:
      description: Array of Connections
      type: array
      items:
        $ref: '#/components/schemas/Connection'
    Error:
      description: Universal Oracle error logs from database
      type: object
      properties:
        errNum:
          type: number
        message:
          type: string
        offset:
          type: string
      example:
        errNum: '404'
        message: Error example app not work...
        offset: line 10022
    Log:
      description: Save information about all application upstage
      type: object
      properties:
        _id:
          description: UUID of log
          type: string
          format: UUID
        date:
          description: Date as string
          type: string
        object:
          description: UUID logged object
          type: string
          format: UUID
        operation:
          description: CRUD CREATE/UPDATE/DELETE
          type: string
        component:
          description: 'Device, Connection, Model, Floor'
          type: string
        message:
          description: Log message
          type: string
      example:
        _id: '102'
        date: '2023/06/17 15:37:58.44'
        object: dfc93d99-72ca-411e-a4e5-b38d5034b1c5
        operation: Update
        component: Device
        message: Message in log
      required:
        - _id
        - date
        - object
        - operation
        - component
        - message
    Logs:
      description: Array of Logs
      type: array
      items:
        $ref: '#/components/schemas/Log'
      example:
        - _id: '102'
          date: '2023/06/17 15:37:58.44'
          object: dfc93d99-72ca-411e-a4e5-b38d5034b1c5
          operation: Update
          component: Device
          message: Message in log
        - _id: '103'
          date: '2023/02/27 10:37:58.44'
          object: dfc93d99-72ca-411e-a4e5-b38d5034b1c6
          operation: Update
          component: Device
          message: Message in log
        - _id: '104'
          date: '2022/01/17 11:37:58.44'
          object: dfc93d99-72ca-411e-a4e5-b38d5034b1c8
          operation: Update
          component: Device
          message: Message in log
  responses:
    '200':
      description: OK. Indicates that the request has succeeded.
    '400':
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '405':
      description: Method Not Allowed. The request HTTP method is known by the server but has been disabled and cannot be used for that resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '501':
      description: Not Implemented. The HTTP method is not supported by the server and cannot be handled.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '502':
      description: Bad getway. The server got an invalid response while working as a gateway to get the response needed to handle the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '503':
      description: Service Unavailable. The server is not ready to handle the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '504':
      description: Gateway Timeout. The server is acting as a gateway and cannot get a response in time for a request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
tags:
  - name: logs
    description: Group Logs API
  - name: devices
    description: Group Devices API
  - name: models
    description: Group Models API
  - name: connections
    description: Group Connections API
  - name: attributes
    description: Group Attributes API
  - name: attributeDictionary
    description: Group Attributes Dictionary API
  - name: floors
    description: Group FloorsAPI
externalDocs:
  description: 'https://ultimasolution.pl/'
  url: 'https://ultimasolution.pl/'

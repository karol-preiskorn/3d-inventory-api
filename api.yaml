openapi: 3.0.3
info:
  title: API for project 3d-inventory
  description: >-
    REST API for **3d-inventory**. Project is a simple solution that allows you to build a spatial and database
    representation of all types of warehouses and server rooms.

    ### Modules

    [Devices](https://localhost:3001/api/#/devices) - [Logs](https://localhost:3001/api/#/logs) -
    [Models](https://localhost:3001/api/#/models) - [Connection](https://localhost:3001/api/#/connection) -
    [AttributesDictionary](https://localhost:3001/api/#/attributesdictionary) -
    [Floors](https://localhost:3001/api/#/floors)
  contact:
    name: 3d-inventory-mongo-api
    url: https://github.com/karol-preiskorn/3d-inventory-mongo-api/
  version: 0.53.23
servers:
  - url: https://localhost:3001
    description: localhost
  - url: https://172.17.0.2:3001
    description: local docker
tags:
  - name: logs
    description: Operation on Logs
  - name: devices
    description: >-
      Basic object _3d-inventory_ device and operation on devices API. Represent by position blok x, y, z with devices
      parameters.
  - name: models
    description: >-
      Models of devices API. Represent by blok dimension x, y, h with block images on every side and model types and
      parameters.
  - name: connections
    description: Connections between devices API
  - name: attributes
    description: Device's Attributes API
  - name: attributesDictionary
    description: Attributes Dictionary API
  - name: floors
    description: Floors manipulation API
  - name: github
    description: GitHub API
  - name: users
    description: User management API
  - name: components
    description: Components API.
paths:
  /attributes:
    get:
      tags:
        - attributes
      summary: Get all attributes
      description: >-
        Retrieve a list of all attributes. You can apply optional query parameters such as `key` to filter attributes by
        their key or `type` to filter by their type.
      operationId: getAllAttributes
      responses:
        "200":
          description: A list of attributes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attributes"
        "404":
          description: Not found.
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        "500":
          description: Unexpected server error
        default:
          description: Unexpected error
      x-swagger-router-controller: Attributes
    put:
      tags:
        - attributes
      summary: Update an existing attribute
      description: Update the details of an existing attribute.
      operationId: updateAttribute
      parameters:
        - name: id
          in: path
          description: ID of the attribute to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "200":
          description: Attribute updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "404":
          description: Attribute update data is inconsistent.
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        "500":
          description: Unexpected server error
        default:
          description: Unexpected error
      x-swagger-router-controller: Attributes
    post:
      tags:
        - attributes
      summary: Create a new attribute
      description: Create a new attribute.
      operationId: createAttribute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "200":
          description: Attribute created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "400":
          description: Bad request.
        "500":
          description: Unexpected server error
      x-swagger-router-controller: Attributes
    delete:
      tags:
        - attributes
      summary: Delete all attributes
      description: Remove all attributes from the inventory.
      operationId: deleteAllAttributes
      responses:
        "200":
          description: All attributes deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: No attributes found to delete
      x-swagger-router-controller: Attributes
  /attributes/{id}:
    get:
      tags:
        - attributes
      summary: Get attribute by ID
      description: Retrieve a single attribute by its ID.
      operationId: getAttributeById
      parameters:
        - name: id
          in: path
          description: ID of attribute to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Attribute found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "404":
          description: Attribute not found
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        default:
          description: Unexpected error
      x-swagger-router-controller: Attributes
    put:
      tags:
        - attributes
      summary: Update attribute by ID
      description: Update a specific attribute by its ID.
      operationId: updateAttributeById
      parameters:
        - name: id
          in: path
          description: ID of attribute to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "200":
          description: Attribute updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "404":
          description: Attribute not found
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        default:
          description: Unexpected error
      x-swagger-router-controller: Attributes
    delete:
      tags:
        - attributes
      summary: Delete attribute by ID
      description: Delete a specific attribute by its ID.
      operationId: deleteAttributeById
      parameters:
        - name: id
          in: path
          description: ID of attribute to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Attribute deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Attribute not found
      x-swagger-router-controller: Attributes
  /github/issues:
    get:
      responses:
        "200":
          description: List all issues.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Issues not found
        "406":
          description: Not Acceptable
        "500":
          description: Unexpected server error
      tags:
        - github
      summary: Get all issues for GitHub
      description: List all issues.
      operationId: githubIssuesGet
      x-swagger-router-controller: github
  /devices:
    get:
      tags:
        - devices
      summary: Get all devices
      description: Retrieve a list of all devices.
      operationId: getAllDevices
      responses:
        "200":
          description: A list of devices
        "404":
          description: No devices found.
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        "500":
          description: Unexpected server error
        default:
          description: Unexpected error
      x-swagger-router-controller: Devices
    put:
      tags:
        - devices
      summary: Update an existing device
      description: Update the details of an existing device.
      operationId: updateDevice
      responses:
        "200":
          description: Device updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Device update data is inconsistent.
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        "500":
          description: Unexpected server error
        default:
          description: Unexpected error
      x-swagger-router-controller: Devices
    delete:
      tags:
        - devices
      summary: Delete all devices
      description: Remove all devices from the inventory.
      operationId: deleteAllDevices
      responses:
        "200":
          description: All devices deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: No devices found to delete
      x-swagger-router-controller: Devices
  /devices/{id}:
    get:
      tags:
        - devices
      summary: Get devices
      description: Get one device.
      operationId: deviceGetOne
      parameters:
        - name: id
          in: path
          description: ID of d
          required: true
          style: simple
          explode: false
          schema:
            type: string
            pattern: ^[0-9A-Fa-f]{24}$
            example: 6566ed4ace63d42b25fbba19
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: List of devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Devices not found
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        default:
          description: Unexpected error
      x-swagger-router-controller: Devices
    put:
      tags:
        - devices
      summary: Update device
      description: Modify selected device
      operationId: devicePutOne
      parameters:
        - name: id
          in: path
          description: ID of device to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Success update device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Devices not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Devices
    delete:
      tags:
        - devices
      summary: Delete selected devices
      description: Delete one device.
      operationId: deviceDeleteOne
      parameters:
        - name: id
          in: path
          description: ID of device to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Not found device to delete
      x-swagger-router-controller: Devices
  /devices/model/{id}:
    get:
      tags:
        - devices
      summary: Get all devices with model :id
      description: Get devices with specific model.
      operationId: deviceGetModel
      parameters:
        - name: id
          in: path
          description: ID of device to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: List of devices with model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Devices"
        "404":
          description: Devices not found with this model :id
        "406":
          description: Not Acceptable
        "429":
          description: Too Many Requests
        default:
          description: Unexpected error
      x-swagger-router-controller: Devices
    delete:
      tags:
        - devices
      summary: Delete selected devices by model :id
      description: Delete devices associated with the specified model ID
      operationId: deviceDeleteModel
      parameters:
        - name: id
          in: path
          description: ID of device to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Not found device to delete
      x-swagger-router-controller: Devices
  /logs:
    get:
      tags:
        - logs
      summary: Get logs from database
      description: Get all logs.
      operationId: logsGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "404":
          description: No found
        "500":
          description: Error
      x-swagger-router-controller: Logs
    put:
      tags:
        - logs
      summary: Update all set log
      description: Update entire collection logs.
      operationId: logPUT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: 6566ed4ace63d42b25fbba19
                  pattern: ^[0-9A-Fa-f]{24}$
                  minLength: 24
                  maxLength: 24
                  x-42c-format: o:uuid
                object:
                  type: string
                  example: 6566ed4ace63d42b25fbba19
                  pattern: ^[0-9A-Fa-f]{24}$
                  minLength: 24
                  maxLength: 24
                  x-42c-format: o:uuid
                date:
                  type: string
                  description: Date as string
                operation:
                  type: string
                  description: CRUD CREATE/UPDATE/DELETE
                component:
                  type: string
                  description: Device, Connection, Model, Floor
                message:
                  type: object
                  description: Log message
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "404":
          description: Id Not found
      x-swagger-router-controller: Logs
    post:
      tags:
        - logs
      summary: Insert new log
      description: Create log.
      operationId: logPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Log"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
              example:
                $ref: "#/components/schemas/Log/example"
        "404":
          description: Error log not found
        "500":
          description: Error log not created
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete log
      description: Delete all logs or a specific log by ID.
      operationId: logAllDelete
      responses:
        "200":
          description: Success log deleted
        "404":
          description: Error log not found
      x-swagger-router-controller: Logs
  /logs/{id}:
    get:
      tags:
        - logs
      summary: Get single log id
      description: Get specific id log.
      operationId: logGetId
      parameters:
        - name: id
          in: path
          description: ID of log to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
        "500":
          description: Server error
      x-swagger-router-controller: Logs
  /logs/component/{component}:
    get:
      tags:
        - logs
      summary: Get logs for components
      description: Get all log for requested component.
      operationId: logGetComponent
      parameters:
        - name: component
          in: path
          description: Name of component to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: devices
            pattern: ^[a-z]{3,20}$
            minLength: 3
            maxLength: 20
            x-42c-format: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "400":
          description: Bad request
        "404":
          description: Error log requested component not found
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete all logs for selected component.
      description: Delete specific logs for the component.
      operationId: logDeleteComponent
      parameters:
        - name: component
          in: path
          description: Name of component to delete logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: devices
            pattern: ^[a-z]{3,20}$
            minLength: 3
            maxLength: 20
            x-42c-format: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "400":
          description: Bad request
        "404":
          description: Error log not found
      x-swagger-router-controller: Logs
  /logs/device/{id}:
    get:
      tags:
        - logs
      summary: Get device log
      description: Get specific device log.
      operationId: logDeviceGet
      parameters:
        - name: id
          in: path
          description: ID of device to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "404":
          description: Error log not found
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete devices log
      description: Delete specific device log.
      operationId: logDeviceDelete
      parameters:
        - name: id
          in: path
          description: ID of device to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "400":
          description: Bad request
        "404":
          description: Error log not found
      x-swagger-router-controller: Logs
  /logs/connection/{id}:
    get:
      tags:
        - logs
      summary: Get connection logs
      description: Get specific connection logs.
      operationId: logConnectionGet
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "400":
          description: Bad request
        "404":
          description: Error logs not found
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete devices logs
      description: Delete specific device logs.
      operationId: logConnectionDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "400":
          description: Bad request
        "404":
          description: Error log not found
      x-swagger-router-controller: Logs
  /logs/attributes/{id}:
    get:
      tags:
        - logs
      summary: Get one attributes logs
      description: Get specific attribute logs.
      operationId: logAttributesGet
      parameters:
        - name: id
          in: path
          description: ID of attribute to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "400":
          description: Bad request
      x-swagger-router-controller: Logs
  /logs/model/{id}:
    get:
      tags:
        - logs
      summary: Get attributes logs for model
      description: Get specific attribute logs for model
      operationId: logModelGetId
      parameters:
        - name: id
          in: path
          description: Model ID of attribute to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "404":
          description: Not found. Indicates that the request has no logs.
        "406":
          description: >-
            Not Acceptable. Indicates that the requested content type is not acceptable.
        "500":
          description: Server side error.
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete attributes logs
      description: Delete specific device logs.
      operationId: logAttributesDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
  /logs/attributesDictionary/{id}:
    get:
      tags:
        - logs
      summary: Get attributesDictionary logs
      description: Get specific attributesDictionary logs.
      operationId: logattributesDictionaryGet
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "404":
          description: Error logs not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete attributesDictionary logs
      description: Delete specific attributesDictionary logs.
      operationId: logattributesDictionaryDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "406":
          description: Not Acceptable
      x-swagger-router-controller: Logs
  /connections:
    get:
      tags:
        - connections
      summary: >-
        Server heartbeat operation. Get information about connection between Devices.
      description: Get all connections between devices
      operationId: connectionsGet
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
    put:
      tags:
        - connections
      summary: Update new connection between two devices
      description: >-
        Create connection between two devices. Two id and attributes from attributes.
      operationId: connectionPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connections"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
              example:
                $ref: "#/components/schemas/Connections/example"
        "404":
          description: Not found connection data
        "500":
          description: Error
      x-swagger-router-controller: Connections
    post:
      tags:
        - connections
      summary: Create new connection between two devices
      description: >-
        Create connection between two devices. Two id and attributes from attributes.
      operationId: connectionPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connections"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
              example:
                $ref: "#/components/schemas/Connection/example"
        "404":
          description: Not found connection data
        "500":
          description: Error
      x-swagger-router-controller: Connections
    delete:
      tags:
        - connections
      summary: Delete connection
      description: >-
        Delete connection between two devices. Two id and attributes from attributes.
      operationId: connectionDELETE
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Not found connection to delete
        "500":
          description: Error
      x-swagger-router-controller: Connections
  /connections/{id}:
    get:
      tags:
        - connections
      summary: Get information about one Connection.
      description: Connection between devices
      operationId: connectionIdGet
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
    put:
      tags:
        - connections
      summary: Update new connection between two devices
      description: >-
        Create connection between two devices. Two id and attributes from attributes.
      operationId: connectionIdPut
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connections"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
              example:
                $ref: "#/components/schemas/Connection/example"
        "404":
          description: Not found connection data
        "500":
          description: Error
      x-swagger-router-controller: Connections
    delete:
      tags:
        - connections
      summary: Delete connections
      description: Delete specific connections logs.
      operationId: connectionIdDelete
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Error log not found
      x-swagger-router-controller: Connections
  /connections/from/{id}:
    get:
      tags:
        - connections
      summary: Get information about Connections between Devices.
      description: Get connection for device
      operationId: connectionsGetFrom
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
    delete:
      tags:
        - connections
      summary: Delete connections logs from device id
      description: Delete specific connections.
      operationId: connectionDeleteFrom
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
        "404":
          description: Error log not found
      x-swagger-router-controller: Connections
  /connections/to/{id}:
    get:
      tags:
        - connections
      summary: Get information about Connections between Devices.
      description: Get connection for device
      operationId: connectionsGetTo
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
    delete:
      tags:
        - connections
      summary: Delete connections logs to device id
      description: Delete specific connections.
      operationId: connectionDeleteTo
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
      x-swagger-router-controller: Connections
  /connections/from/{idFrom}/to/{idTo}:
    get:
      tags:
        - connections
      summary: Get information about Connections between Devices.
      description: Get connection for device
      operationId: connectionsFromToGet
      parameters:
        - name: idFrom
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
        - name: idTo
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
    delete:
      tags:
        - connections
      summary: Delete information about Connections between Devices.
      description: Delete connection for device
      operationId: connectionsFromToDelete
      parameters:
        - name: idFrom
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
        - name: idTo
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
  /attributesDictionary:
    get:
      tags:
        - attributesDictionary
      summary: Information about configuration attributes types.
      description: >-
        Store information about what parameters can apply to what type of type objects.
      operationId: attributesDictionaryGet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributesDictionaries"
        "400":
          description: Bad request.
        "404":
          description: Not found.
        "500":
          description: Unexpected server error.
      x-swagger-router-controller: attributesDictionary
    put:
      tags:
        - attributesDictionary
      summary: Update attributesDictionary
      operationId: attributesDictionaryPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributesDictionary"
        required: true
      responses:
        "200":
          description: OK. Indicates that the update request has succeeded.
        "400":
          description: Bad request.
        "404":
          description: Not found.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: attributesDictionary
    post:
      tags:
        - attributesDictionary
      summary: Create devices attributes types.
      description: 3d-inventory attributes from dictionary attributes
      operationId: attributesDictionaryPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributesDictionary"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributesDictionary"
              example:
                $ref: "#/components/schemas/AttributesDictionary/example"
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: attributesDictionary
    delete:
      tags:
        - attributesDictionary
      summary: Delete all attributesDictionary
      description: |-
        Delete a specific attribute in the attributes dictionary by ID. '200':
          description: OK. Indicates that the request has succeeded.
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: attributesDictionary
  /attributesDictionary/{id}:
    get:
      tags:
        - attributesDictionary
      summary: Get information attribute type.
      operationId: attributesDictionaryGetId
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 65c2bbf4e6e6d4ea3d398765
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributesDictionary"
        "400":
          description: Bad request.
        "404":
          description: Not found.
        "500":
          description: Unexpected server error.
      x-swagger-router-controller: attributesDictionary
    put:
      tags:
        - attributesDictionary
      summary: Update attributesDictionary
      operationId: attributesDictionaryPutId
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 65c2bbf4e6e6d4ea3d398765
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributesDictionary"
        required: true
      responses:
        "200":
          description: OK.
        "400":
          description: Bad request.
        "404":
          description: Not found.
        "500":
          description: Unexpected server error.
      x-swagger-router-controller: attributesDictionary
    delete:
      tags:
        - attributesDictionary
      summary: Delete all attributesDictionary
      description: >-
        Create Attributes between two devices. Two id and attributes from attributes.
      operationId: attributesDictionaryDeleteId
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Not found
        "500":
          description: Unexpected server error.
        x-swagger-router-controller: attributesDictionary
  /attributesDictionary/models:
    get:
      tags:
        - attributesDictionary
      summary: Get information about devices attributes for models.
      description: Dictionary attributes dictionary for models.
      operationId: attributesDictionaryModelsGet
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributesDictionaries"
              example:
                $ref: "#/components/schemas/AttributesDictionaries"
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: attributesDictionary
  /attributesDictionary/devices:
    get:
      tags:
        - attributesDictionary
      summary: Get information about devices attributes for models.
      description: Dictionary attributes dictionary for models.
      operationId: attributesDictionaryDevicesGet
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributesDictionaries"
              example:
                $ref: "#/components/schemas/AttributesDictionaries"
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from  fulfilling
            the request.
      x-swagger-router-controller: attributesDictionary
  /attributesDictionary/connections:
    get:
      tags:
        - attributesDictionary
      summary: Get information about devices attributes for connections.
      description: Dictionary attributes dictionary for connections.
      operationId: attributesDictionaryConnectionsGet
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributesDictionaries"
              example:
                $ref: "#/components/schemas/AttributesDictionaries"
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from  fulfilling
            the request.
      x-swagger-router-controller: attributesDictionary
  /models:
    get:
      tags:
        - models
      summary: Get list all devices models
      description: Dictionary models of device.
      operationId: modelsGet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models"
              example:
                $ref: "#/components/schemas/Models/example"
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Models
    put:
      tags:
        - models
      summary: Update model
      description: Update single model
      operationId: modelsPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Models
    post:
      tags:
        - models
      summary: Create model.
      description: Create model of device.
      operationId: modelsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Models
    delete:
      tags:
        - models
      summary: Delete all models
      description: Delete all models
      operationId: modelsDelete
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Models
  /models/{id}:
    get:
      tags:
        - models
      summary: Get selected model :id
      description: Get one model of device.
      operationId: modelIdGet
      parameters:
        - name: id
          in: path
          description: ID of attributesDictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "404":
          description: Not found
        "500":
          description: Unexpected server error.
      x-swagger-router-controller: Models
    put:
      tags:
        - models
      summary: Update selected model :id
      description: Modify a specific model by ID.
      operationId: modelIdPut
      parameters:
        - name: id
          in: path
          description: Id of model
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "404":
          description: Not found model to update
        "500":
          description: Unexpected server error.
      x-swagger-router-controller: Models
    delete:
      tags:
        - models
      summary: Delete selected model :id
      description: Delete one model of device.
      operationId: modelIdDelete
      parameters:
        - name: id
          in: path
          description: ID of the model to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Not found
        "500":
          description: Unexpected server error.
      x-swagger-router-controller: Models
  /floors:
    get:
      tags:
        - floors
      summary: Get all floors data
      description: Get all floors data
      operationId: floorsGet
      responses:
        "200":
          description: OK
        "404":
          description: Not found
      x-swagger-router-controller: Floors
    put:
      tags:
        - floors
      summary: Update floor
      description: Create floor
      operationId: floorPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Floor"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: Floors
    post:
      tags:
        - floors
      summary: Create new floor.
      description: Create new object floor
      operationId: floorPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Floor"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Floors
    delete:
      tags:
        - floors
      summary: Delete all floors
      description: Create floor
      operationId: floorDelete
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Floors
  /floors/{id}:
    get:
      tags:
        - floors
      summary: Get the single floor :id
      description: Get single floor
      operationId: floorIdGet
      parameters:
        - name: id
          in: path
          description: ID of floor to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Floor"
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Floors
    delete:
      tags:
        - floors
      summary: Delete the single floor :id
      description: Delete single floor
      operationId: floorIdDelete
      parameters:
        - name: id
          in: path
          description: ID of floor to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Floor"
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Floors
    put:
      tags:
        - floors
      summary: Update the single floor :id
      description: Update single floor
      operationId: floorIdPut
      parameters:
        - name: id
          in: path
          description: ID of floor to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            pattern: ^[0-9A-Fa-f]{24}$
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Floor"
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
            the request.
      x-swagger-router-controller: Floors
  /users:
    get:
      tags:
        - users
      summary: Get all user data
      description: Get all user data
      operationId: usersGet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "404":
          description: Not found
      x-swagger-router-controller: Users
    put:
      tags:
        - users
      summary: Update user
      description: Create user
      operationId: usersPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: Users
    post:
      tags:
        - users
      summary: Create new user
      description: Create new user
      operationId: userPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: Users
    delete:
      tags:
        - users
      summary: Delete all users
      description: Delete all users
      operationId: usersDelete
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "404":
          description: Not found
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: Users
  /users/{id}:
    get:
      tags:
        - users
      summary: Get the single user :id
      description: Get single user
      operationId: userGetId
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
            pattern: ^[0-9A-Fa-f]{24}$
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not found
      x-swagger-router-controller: Users
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user
      operationId: userCreate
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 6566ed4ace63d42b25fbba19
            minLength: 24
            maxLength: 24
            x-42c-format: o:uuid
            pattern: ^[0-9A-Fa-f]{24}$
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Confirmation"
        "400":
          description: Bad request.
        "500":
          description: >-
            Unexpected server error. The server encountered an unexpected condition that prevented it fromfulfilling the
            request.
      x-swagger-router-controller: Users
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 6566ed4ace63d42b25fbba19
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
          pattern: ^[0-9A-Fa-f]{24}$
        name:
          type: string
          minLength: 2
          maxLength: 256
        email:
          type: string
          format: email
          example: support@company.co.uk
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
          minLength: 6
          maxLength: 320
          x-42c-format: o:email
        password:
          type: string
          minLength: 8
          maxLength: 256
        token:
          type: string
          minLength: 20
          maxLength: 256
          example: hGlyJ6KGJtKrMvNcpMwY1lRs6Cys3yCHQ0ZxMT7mCKFUOdrIOd
    Users:
      type: array
      description: Array of User
      maxItems: 1000
      items:
        $ref: "#/components/schemas/User"
    Floor:
      type: object
      properties:
        _id:
          type: string
          example: 6566ed4ace63d42b25fbba19
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
          pattern: ^[0-9A-Fa-f]{24}$
        name:
          type: string
        address:
          $ref: "#/components/schemas/FloorAddress"
        array:
          $ref: "#/components/schemas/FloorArray"
      description: Floor object
      example:
        _id: 653e120577c067b6abbe5d26
        name: Konopelski - Walter - incentivize global 2222
        address:
          street: Zion Valleys 86789
          city: Paradise
          country: Papua New Guinea
          postcode: 05649-8267
        dimension:
          description: Koss, Powlowski and Sipes - leverage out-of-the-box schemas
          x: 54
          "y": 58
          h: 6
          x_pos: 76
          y_pos: 70
    Floors:
      type: array
      description: Array of Floor
      maxItems: 1000
      items:
        $ref: "#/components/schemas/Floor"
    Dimension:
      type: object
      properties:
        depth:
          type: number
          minimum: 1
          maximum: 100
        height:
          type: number
          minimum: 1
          maximum: 100
        width:
          type: number
          minimum: 1
          maximum: 100
      example:
        width: 1
        height: 2
        depth: 2
    Texture:
      type: object
      properties:
        back:
          type: string
          example: /assets/r710-2.5-nobezel__29341.png
          pattern: ^(.+)\/([^/]+)\.(png|jpg)$
          minLength: 6
          maxLength: 256
        bottom:
          type: string
          example: /assets/r710-2.5-nobezel__29341.png
          pattern: ^(.+)\/([^/]+)\.(png|jpg)$
          minLength: 6
          maxLength: 256
          x-42c-format: o:uri
        front:
          type: string
          example: /assets/r710-2.5-nobezel__29341.png
          pattern: ^(.+)\/([^/]+)\.(png|jpg)$
          minLength: 6
          maxLength: 256
          x-42c-format: o:uri
        side:
          type: string
          example: /assets/r710-2.5-nobezel__29341.png
          pattern: ^(.+)\/([^/]+)\.(png|jpg)$
          minLength: 2
          maxLength: 256
          x-42c-format: o:uri
        top:
          type: string
          example: /assets/r710-2.5-nobezel__29341.png
          pattern: ^(.+)\/([^/]+)\.(png|jpg)$
          minLength: 2
          maxLength: 256
          x-42c-format: o:uri
      example:
        front: /assets/r710-2.5-nobezel__29341.png
        back: /assets/r710-2.5-nobezel__29341.png
        side: /assets/r710-2.5-nobezel__29341.png
        top: /assets/r710-2.5-nobezel__29341.png
        bottom: /assets/r710-2.5-nobezel__29341.png
    Model:
      required:
        - _id
        - category
        - name
        - type
      type: object
      properties:
        _id:
          type: string
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
        category:
          type: string
        dimension:
          $ref: "#/components/schemas/Dimension"
        name:
          type: string
        texture:
          $ref: "#/components/schemas/Texture"
        type:
          type: string
      description: Object of Models
      example:
        _id: 653e1059d6025afb66017c63
        name: Model 1
        dimension:
          width: 1
          height: 2
          depth: 2
        texture:
          front: /assets/r710-2.5-nobezel__29341.png
          back: /assets/r710-2.5-nobezel__29341.png
          side: /assets/r710-2.5-nobezel__29341.png
          top: /assets/r710-2.5-nobezel__29341.png
          bottom: /assets/r710-2.5-nobezel__29341.png
    Models:
      type: array
      description: Array of Models
      maxItems: 1000
      example:
        type: array
        items:
          $ref: "#/components/schemas/Model/example"
      items:
        $ref: "#/components/schemas/Model"
    AttributesDictionary:
      required:
        - _id
        - name
        - componentName
        - type
        - unit
      type: object
      properties:
        _id:
          type: string
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
        componentName:
          type: string
          enum:
            - Devices
            - Models
            - Connections
            - Floors
        name:
          type: string
          pattern: ^[a-zA-Z0-9_\-]{1,64}$
          maxLength: 64
          description: Name of attribute
        type:
          type: string
          description: Data type of attribute
          enum:
            - String
            - Number
            - Integer
            - Object
        unit:
          type: string
          description: Units of attribute
      additionalProperties: false
      example:
        _id: 653e10ecd6025afb66017c65
        componentName: Devices
        name: power
        type: String
        unit: W
    AttributesDictionaries:
      type: array
      description: List of Attribute Dictionary
      maxItems: 1000
      items:
        $ref: "#/components/schemas/AttributesDictionary"
    Attribute:
      description: >-
        Attribute is a key-value pair that can be associated with a device, model, or connection.
      x-42c-format: o:attribute
      required:
        - _id
        - name
        - value
      type: object
      properties:
        _id:
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
          type: string
        attributesDictionaryId:
          type: string
        connectionId:
          type: string
        deviceId:
          type: string
        modelId:
          type: string
        name:
          type: string
        value:
          type: string
      example:
        _id: 653e10ecd6025afb66017c65
        attributesDictionaryId: 653e10ecd6025afb66017c65
        connectionId: 653e10ecd6025afb66017c70
        deviceId: 653e10ecd6025afb66017c71
        modelId: 653e10ecd6025afb66017c72
        name: power
        value: 3W
    Attributes:
      type: array
      description: List of attributes
      maxItems: 1000
      example:
        - _id: 653e10ecd6025afb66017c65
          attributesDictionaryId: 653e10ecd6025afb66017c65
          connectionId: 653e10ecd6025afb66017c70
          deviceId: 653e10ecd6025afb66017c71
          modelId: 653e10ecd6025afb66017c72
          name: power
          value: 3W
        - _id: 653e10ecd6025afb66017c66
          attributesDictionaryId: 653e10ecd6025afb66017c66
          connectionId: 653e10ecd6025afb66017c73
          deviceId: 653e10ecd6025afb66017c74
          modelId: 653e10ecd6025afb66017c75
          name: color
          value: black
        - _id: 653e10ecd6025afb66017c67
          attributesDictionaryId: 653e10ecd6025afb66017c67
          connectionId: 653e10ecd6025afb66017c76
          deviceId: 653e10ecd6025afb66017c77
          modelId: 653e10ecd6025afb66017c78
          name: year
          value: "1999"
      items:
        $ref: "#/components/schemas/Attribute"
    Position:
      required:
        - x
        - "y"
        - h
      type: object
      properties:
        x:
          type: number
          description: Width
        "y":
          type: number
          description: Depth
        h:
          type: number
          description: Height
      additionalProperties: false
      description: Position device on the floor
    Device:
      required:
        - _id
        - modelId
        - name
      type: object
      properties:
        _id:
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
        name:
          type: string
          description: Device name
        modelId:
          example: 6566ed4ace63d42b25fbba19
          type: string
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
        position:
          $ref: "#/components/schemas/Position"
        attributes:
          $ref: "#/components/schemas/Attributes"
      description: Device it is basic structure 3d-inventory
      example:
        _id: 6566ed4ace63d42b25fbba19
        name: Device 2
        modelId: 6566ed4ace63d42b25fbba19
        position:
          x: 4
          "y": 3
          h: 0
        attributes:
          - _id: 653e10ecd6025afb66017c65
            key: power
            value: 3W
          - _id: 653e10ecd6025afb66017c66
    Devices:
      type: array
      maxItems: 1000
      items:
        $ref: "#/components/schemas/Device"
    Connection:
      required:
        - _id
        - deviceIdFrom
        - deviceIdTo
        - name
      type: object
      properties:
        _id:
          type: string
          description: Connection id uuid
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
        name:
          type: string
          description: Connection name
        deviceIdTo:
          type: string
          description: Connection to
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
        deviceIdFrom:
          type: string
          description: Connection from
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
      example:
        _id: 6566ed4ace63d42b25fbba19
        name: Connection 1
        deviceIdFrom: 6566ed4ace63d42b25fbba19
        deviceIdTo: 6566ed4ace63d42b25fbba20
    Connections:
      type: array
      description: Array of Connections
      maxItems: 1000
      items:
        $ref: "#/components/schemas/Connection"
      example:
        - _id: 6566ed4ace63d42b25fbba19
          name: Connection 1
          deviceIdFrom: 6566ed4ace63d42b25fbba19
          deviceIdTo: 6566ed4ace63d42b25fbba20
        - _id: 6566ed4ace63d42b25fbba21
          name: Connection 2
          deviceIdFrom: 6566ed4ace63d42b25fbba22
          deviceIdTo: 6566ed4ace63d42b25fbba23
    Component:
      required:
        - _id
        - component
        - collection
        - attributes
      type: object
      properties:
        _id:
          type: string
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
        component:
          type: string
          maxLength: 20
        collection:
          type: string
          maxLength: 20
        attributes:
          type: array
          description: List of attributes
          maxItems: 1000
          items:
            $ref: "#/components/schemas/Attribute"
    Components:
      type: array
      description: Array of Components
      maxItems: 1000
      items:
        $ref: "#/components/schemas/Component"
    Error:
      type: object
      properties:
        errorNum:
          type: number
        message:
          type: string
      description: Universal error message from database
      example:
        errorNum: xxx
        message: Error example app not work...
    Confirmation:
      type: object
      properties:
        message:
          type: string
      additionalProperties: false
      description: Universal confirmation message from database
      example:
        message: Succeed
    Log:
      required:
        - _id
        - component
        - date
        - message
        - object
        - operation
      type: object
      properties:
        _id:
          description: UUID of log (MongoDB ObjectId format)
          type: string
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
        date:
          type: string
          description: Date as string
        object:
          type: string
          description: UUID logged object
          example: 6566ed4ace63d42b25fbba19
          pattern: ^[0-9A-Fa-f]{24}$
          minLength: 24
          maxLength: 24
          x-42c-format: o:uuid
        operation:
          type: string
          description: CRUD CREATE/UPDATE/DELETE
        component:
          type: string
          description: Device, Connection, Model, Floor
        message:
          type: object
          description: Log message
      description: Save information about all application upstage
      example:
        _id: 666f1f958237b346e54f2cd0
        date: 2023/06/17 15:37:58.44
        object: 6566ed4ace63d42b25fbba19
        operation: Update
        component: Device
        message:
          name: Mouse pink-rabbit
    Logs:
      type: array
      maxItems: 1000
      items:
        $ref: "#/components/schemas/Log"
      additionalProperties: false
      example:
        - _id: 666f1f958237b346e54f2cd0
          date: 2023/06/17 15:37:58.44
          object: 666f1f958237b346e54f2cd0
          operation: Update
          component: Device
          message: Message in log
        - _id: 666f1f958237b346e54f2cd0
          date: 2023/02/27 10:37:58.44
          object: 6566ed4ace63d42b25fbba19
          operation: Update
          component: Device
          message: Message in log
        - _id: 666f1f958237b346e54f2cd0
          date: 2022/01/17 11:37:58.44
          object: 6566ed4ace63d42b25fbba19
          operation: Update
          component: Device
          message: Message in log
        - _id: 666f1f958237b346e54f2cd0
          date: 2022/01/17 11:37:58.44
          object: 6566ed4ace63d42b25fbba19
          operation: Update
          component: Model
          message: Message in log
    FloorAddress:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        country:
          type: string
        postcode:
          type: string
    FloorArray:
      type: object
      properties:
        description:
          type: string
        x:
          type: number
        "y":
          type: number
        h:
          type: number
        xPos:
          type: number
        yPos:
          type: number
        hPos:
          type: number
  responses:
    "200":
      description: OK. Indicates that the request has succeeded.
    "400":
      description: Bad request.
    "401":
      description: Authorization information is missing or invalid.
    "404":
      description: Not found
    "405":
      description: >-
        Method Not Allowed. The request HTTPS method is known by the server but has been disabled and cannot be used for
        that resource.
    "500":
      description: >-
        Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling the
        request.
    "501":
      description: >-
        Not Implemented. The HTTPS method is not supported by the server and cannot be handled.
    "502":
      description: >-
        Bad getaway. The server got an invalid response while working as a gateway to get the response needed to handle
        the request.
    "503":
      description: Service Unavailable. The server is not ready to handle the request.
    "504":
      description: >-
        Gateway Timeout. The server is acting as a gateway and cannot get a response in time for a request.

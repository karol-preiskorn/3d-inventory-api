{
  "timestamp": "2025-09-27T09:18:19.719Z",
  "checks": [
    {
      "name": "TypeScript Types",
      "passed": true,
      "details": "All types are valid"
    },
    {
      "name": "ESLint",
      "passed": true,
      "details": "No linting issues"
    },
    {
      "name": "Test Coverage",
      "passed": false,
      "details": "Command failed: npm run test:coverage -- --silent\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nts-jest[ts-jest-transformer] (WARN) Define `ts-jest` config under `globals` is deprecated. Please do\ntransform: {\n    <transform_regex>: ['ts-jest', { /* ts-jest config goes here in Jest */ }],\n},\nSee more at https://kulshekhar.github.io/ts-jest/docs/getting-started/presets#advanced\nPASS ts-jest src/tests/health.test.ts (18.655 s)\n  Health Controller\n    ✓ should return healthy status with connected database (17 ms)\n    ✓ should return degraded status when database is null (5 ms)\n    ✓ should return degraded status when database ping fails (7 ms)\n    ✓ should include all required health status properties (5 ms)\n    ✓ should have valid timestamp format (4 ms)\n    ✓ should have valid uptime information (2 ms)\n    ✓ should have correct port configuration (2 ms)\n\nPASS ts-jest src/tests/models.test.ts (19.387 s)\n  Models Router\n    GET /models\n      ✓ should call getAllModels controller and return model list (86 ms)\n      ✓ should handle getAllModels errors (41 ms)\n      ✓ should return empty array when no models exist (14 ms)\n    GET /models/:id\n      ✓ should call getModelById controller and return model details (13 ms)\n      ✓ should handle model not found (12 ms)\n      ✓ should handle database errors for single model lookup (15 ms)\n    POST /models\n      ✓ should call createModel controller with valid model data (32 ms)\n      ✓ should validate required name field (19 ms)\n      ✓ should validate name field type (19 ms)\n      ✓ should handle duplicate model creation (16 ms)\n    PUT /models/:id\n      ✓ should call updateModel controller with valid data (11 ms)\n      ✓ should validate name field for updates (10 ms)\n      ✓ should handle model not found for update (7 ms)\n    PATCH /models/dimension/:id\n      ✓ should call updateModelDimension controller (9 ms)\n      ✓ should handle invalid dimension data (19 ms)\n    PATCH /models/texture/:id\n      ✓ should call updateModelTexture controller (16 ms)\n      ✓ should handle partial texture updates (18 ms)\n    DELETE /models/:id\n      ✓ should call deleteModel controller (17 ms)\n      ✓ should handle model not found for deletion (18 ms)\n    DELETE /models\n      ✓ should call deleteAllModels controller (12 ms)\n      ✓ should handle authorization for bulk delete (11 ms)\n    Error Handling & Edge Cases\n      ✓ should handle malformed JSON in POST requests (22 ms)\n      ✓ should handle invalid ObjectId format (13 ms)\n      ✓ should handle server errors gracefully (14 ms)\n    Middleware Integration\n      ✓ should parse JSON request bodies correctly (13 ms)\n      ✓ should validate ObjectId middleware for parameterized routes (14 ms)\n\nPASS ts-jest src/tests/models.api.test.ts (19.447 s)\n  Models Controller\n    getAllModels\n      ✓ should return all models successfully (15 ms)\n      ✓ should return empty array when no models found (3 ms)\n      ✓ should respect limit query parameter (1 ms)\n      ✓ should handle invalid limit parameter (1 ms)\n    getModelById\n      ✓ should return model when found (6 ms)\n      ✓ should return 404 when model not found (2 ms)\n      ✓ should return 400 for invalid ObjectId (3 ms)\n    createModel\n      ✓ should create model successfully (5 ms)\n      ✓ should validate required name field (4 ms)\n      ✓ should validate dimension object (4 ms)\n      ✓ should validate texture object (3 ms)\n    updateModel\n      ✓ should update model successfully (7 ms)\n      ✓ should return 404 for non-existent model (4 ms)\n    updateModelDimension\n      ✓ should update model dimension successfully (6 ms)\n      ✓ should validate dimension data (3 ms)\n    updateModelTexture\n      ✓ should update model texture successfully (2 ms)\n    deleteModel\n      ✓ should delete model successfully (2 ms)\n      ✓ should return 404 when model not found for deletion (2 ms)\n    deleteAllModels\n      ✓ should delete all models successfully (3 ms)\n      ✓ should handle no models to delete (2 ms)\n      ✓ should require confirmation parameter (1 ms)\n\nPASS ts-jest src/tests/attributes.api.test.ts (19.919 s)\n  Attributes API Controller Tests\n    getAllAttributes\n      ✓ should return all attributes successfully (13 ms)\n      ✓ should return 404 when no attributes found (1 ms)\n      ✓ should handle database errors (2 ms)\n    getAttributeById\n      ✓ should return attribute by valid ID (3 ms)\n      ✓ should return 404 when attribute not found (1 ms)\n      ✓ should return 400 for invalid attribute ID (1 ms)\n    createAttribute\n      ✓ should create attribute successfully (2 ms)\n      ✓ should require value field (1 ms)\n      ✓ should validate attributeDictionaryId is valid ObjectId (1 ms)\n    updateAttribute\n      ✓ should update attribute successfully (1 ms)\n      ✓ should return 404 when attribute not found for update (1 ms)\n      ✓ should return 400 for invalid attribute ID in update (1 ms)\n    deleteAttribute\n      ✓ should delete attribute successfully (1 ms)\n      ✓ should return 404 when attribute not found for deletion (1 ms)\n      ✓ should return 400 for invalid attribute ID in deletion (1 ms)\n    deleteAllAttributes\n      ✓ should delete all attributes successfully (1 ms)\n      ✓ should return 404 when no attributes found to delete (1 ms)\n    deleteAttributesByModelId\n      ✓ should delete attributes by model ID successfully (1 ms)\n      ✓ should return 404 when no attributes found for model deletion (1 ms)\n      ✓ should return 400 for invalid model ID in deleteAttributesByModelId (1 ms)\n\nPASS ts-jest src/tests/devices.test.ts (20.078 s)\n  Devices Router\n    GET /devices\n      ✓ should call getAllDevices controller and return device list (84 ms)\n      ✓ should handle getAllDevices errors (16 ms)\n      ✓ should return empty array when no devices exist (12 ms)\n    GET /devices/:id\n      ✓ should call getDeviceById controller and return device details (16 ms)\n      ✓ should handle device not found (10 ms)\n      ✓ should handle database errors for single device lookup (11 ms)\n    PUT /devices/:id\n      ✓ should call updateDevice controller with valid data (34 ms)\n      ✓ should handle validation errors for invalid update data (15 ms)\n      ✓ should handle device not found for update (13 ms)\n    POST /devices\n      ✓ should call createDevice controller with valid device data (13 ms)\n      ✓ should handle missing required fields (14 ms)\n      ✓ should handle duplicate device creation (12 ms)\n    DELETE /devices/:id\n      ✓ should call deleteDevice controller (12 ms)\n      ✓ should handle device not found for deletion (13 ms)\n    GET /devices/model/:modelId\n      ✓ should call getDevicesByModel controller (13 ms)\n      ✓ should handle no devices found for model (7 ms)\n    PATCH /devices/position/:id\n      ✓ should call updateDevicePosition controller (9 ms)\n      ✓ should validate position data (13 ms)\n    DELETE /devices\n      ✓ should call deleteAllDevices controller (8 ms)\n      ✓ should handle authorization for bulk delete (10 ms)\n    DELETE /devices/model/:modelId\n      ✓ should call deleteDevicesByModel controller (9 ms)\n    Error Handling & Edge Cases\n      ✓ should handle malformed JSON in POST requests (14 ms)\n      ✓ should handle missing request body in PUT requests (11 ms)\n      ✓ should handle invalid ObjectId format (14 ms)\n      ✓ should handle server errors gracefully (16 ms)\n    Middleware Integration\n      ✓ should parse JSON request bodies correctly (17 ms)\n      ✓ should handle authentication middleware pass-through (17 ms)\n\nFAIL ts-jest src/tests/logs.api.test.ts (19.982 s)\n  Logs Controller\n    getAllLogs\n      ✕ should return all logs with default limit (16 ms)\n      ✕ should apply custom limit when provided (3 ms)\n      ✕ should enforce maximum limit (2 ms)\n      ✕ should handle invalid limit gracefully (1 ms)\n      ✕ should return 404 when no logs found (5 ms)\n      ✕ should handle database errors (8 ms)\n    getLogsByObjectId\n      ✕ should return logs for valid object ID (2 ms)\n      ✕ should return 404 when no logs found for object ID (2 ms)\n    getLogsByComponent\n      ✕ should return logs for valid component (2 ms)\n      ✕ should apply limit to component logs (2 ms)\n    createLog\n      ✕ should create a new log entry (9 ms)\n      ✕ should validate required fields (6 ms)\n      ✕ should validate component against allowed values (4 ms)\n      ✕ should sanitize input data (4 ms)\n    deleteLog\n      ✕ should delete log by valid ObjectId (5 ms)\n      ✕ should return 404 when log not found (8 ms)\n      ✕ should validate ObjectId format (8 ms)\n    deleteAllLogs\n      ✕ should delete all logs successfully (2 ms)\n      ✕ should handle case when no logs to delete (2 ms)\n    VALID_COMPONENTS\n      ✓ should contain expected components (1 ms)\n      ✕ should be readonly array (2 ms)\n    Log data structure validation\n      ✕ should validate log interface properties (8 ms)\n      ✕ should have valid timestamp format (1 ms)\n      ✕ should have valid action from allowed list (5 ms)\n      ✕ should have valid entity from allowed list (2 ms)\n\n  ● Logs Controller › getAllLogs › should return all logs with default limit\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"logs\"\n\n    Number of calls: 0\n\n      76 |       await getAllLogs(mockRequest, mockResponse, jest.fn())\n      77 |\n    > 78 |       expect(mockDb.collection).toHaveBeenCalledWith('logs')\n         |                                 ^\n      79 |       expect(mockCollection.find).toHaveBeenCalledWith({})\n      80 |       expect(mockCollection.sort).toHaveBeenCalledWith({ date: -1 })\n      81 |       expect(mockCollection.limit).toHaveBeenCalledWith(200) // Default limit\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:78:33)\n\n  ● Logs Controller › getAllLogs › should apply custom limit when provided\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 50\n\n    Number of calls: 0\n\n      92 |       await getAllLogs(mockRequest, mockResponse, jest.fn())\n      93 |\n    > 94 |       expect(mockCollection.limit).toHaveBeenCalledWith(50)\n         |                                    ^\n      95 |       expect(mockResponse.status).toHaveBeenCalledWith(200)\n      96 |       expect(mockResponse.json).toHaveBeenCalledWith(mockLogs)\n      97 |     })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:94:36)\n\n  ● Logs Controller › getAllLogs › should enforce maximum limit\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 1000\n\n    Number of calls: 0\n\n      105 |       await getAllLogs(mockRequest, mockResponse, jest.fn())\n      106 |\n    > 107 |       expect(mockCollection.limit).toHaveBeenCalledWith(1000) // Max limit\n          |                                    ^\n      108 |     })\n      109 |\n      110 |     it('should handle invalid limit gracefully', async () => {\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:107:36)\n\n  ● Logs Controller › getAllLogs › should handle invalid limit gracefully\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 200\n\n    Number of calls: 0\n\n      116 |       await getAllLogs(mockRequest, mockResponse, jest.fn())\n      117 |\n    > 118 |       expect(mockCollection.limit).toHaveBeenCalledWith(200) // Default limit\n          |                                    ^\n      119 |     })\n      120 |\n      121 |     it('should return 404 when no logs found', async () => {\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:118:36)\n\n  ● Logs Controller › getAllLogs › should return 404 when no logs found\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 404\n    Received: 500\n\n    Number of calls: 1\n\n      124 |       await getAllLogs(mockRequest, mockResponse, jest.fn())\n      125 |\n    > 126 |       expect(mockResponse.status).toHaveBeenCalledWith(404)\n          |                                   ^\n      127 |       expect(mockResponse.json).toHaveBeenCalledWith({\n      128 |         error: 'No logs found'\n      129 |       })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:126:35)\n\n  ● Logs Controller › getAllLogs › should handle database errors\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    - Expected\n    + Received\n\n      Object {\n        \"error\": \"Internal server error\",\n    +   \"message\": \"(0 , db_1.getDatabase) is not a function\",\n    +   \"module\": \"logs\",\n    +   \"procedure\": \"getAllLogs\",\n      },\n\n    Number of calls: 1\n\n      136 |\n      137 |       expect(mockResponse.status).toHaveBeenCalledWith(500)\n    > 138 |       expect(mockResponse.json).toHaveBeenCalledWith({\n          |                                 ^\n      139 |         error: 'Internal server error'\n      140 |       })\n      141 |     })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:138:33)\n\n  ● Logs Controller › getLogsByObjectId › should return logs for valid object ID\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: {\"objectId\": \"test-object-123\"}\n\n    Number of calls: 0\n\n      154 |       await getLogsByObjectId(mockRequest, mockResponse, jest.fn())\n      155 |\n    > 156 |       expect(mockCollection.find).toHaveBeenCalledWith({ objectId })\n          |                                   ^\n      157 |       expect(mockResponse.status).toHaveBeenCalledWith(200)\n      158 |       expect(mockResponse.json).toHaveBeenCalledWith(mockLogs)\n      159 |     })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:156:35)\n\n  ● Logs Controller › getLogsByObjectId › should return 404 when no logs found for object ID\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 404\n    Received: 500\n\n    Number of calls: 1\n\n      165 |       await getLogsByObjectId(mockRequest, mockResponse, jest.fn())\n      166 |\n    > 167 |       expect(mockResponse.status).toHaveBeenCalledWith(404)\n          |                                   ^\n      168 |       expect(mockResponse.json).toHaveBeenCalledWith({\n      169 |         error: 'No logs found for object ID: non-existent-id'\n      170 |       })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:167:35)\n\n  ● Logs Controller › getLogsByComponent › should return logs for valid component\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: {\"component\": \"devices\"}\n\n    Number of calls: 0\n\n      184 |       await getLogsByComponent(mockRequest, mockResponse, jest.fn())\n      185 |\n    > 186 |       expect(mockCollection.find).toHaveBeenCalledWith({ component })\n          |                                   ^\n      187 |       expect(mockResponse.status).toHaveBeenCalledWith(200)\n      188 |       expect(mockResponse.json).toHaveBeenCalledWith(mockLogs)\n      189 |     })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:186:35)\n\n  ● Logs Controller › getLogsByComponent › should apply limit to component logs\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 25\n\n    Number of calls: 0\n\n      198 |       await getLogsByComponent(mockRequest, mockResponse, jest.fn())\n      199 |\n    > 200 |       expect(mockCollection.limit).toHaveBeenCalledWith(25)\n          |                                    ^\n      201 |     })\n      202 |   })\n      203 |\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:200:36)\n\n  ● Logs Controller › createLog › should create a new log entry\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"component\": \"devices\", \"date\": Any<String>, \"message\": {\"test\": \"data\"}, \"objectId\": \"test-object-123\", \"operation\": \"CREATE\"}\n\n    Number of calls: 0\n\n      222 |       await createLog(mockRequest, mockResponse, jest.fn())\n      223 |\n    > 224 |       expect(mockCollection.insertOne).toHaveBeenCalledWith(\n          |                                        ^\n      225 |         expect.objectContaining({\n      226 |           objectId: logData.objectId,\n      227 |           operation: logData.operation,\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:224:40)\n\n  ● Logs Controller › createLog › should validate required fields\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"error\": StringContaining \"Missing required fields\"}\n    Received: {\"error\": \"Invalid input data\", \"message\": \"Missing required fields: operation, component, message\"}\n\n    Number of calls: 1\n\n      244 |\n      245 |       expect(mockResponse.status).toHaveBeenCalledWith(400)\n    > 246 |       expect(mockResponse.json).toHaveBeenCalledWith(\n          |                                 ^\n      247 |         expect.objectContaining({\n      248 |           error: expect.stringContaining('Missing required fields')\n      249 |         })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:246:33)\n\n  ● Logs Controller › createLog › should validate component against allowed values\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"error\": StringContaining \"Invalid component\"}\n    Received: {\"error\": \"Invalid input data\", \"message\": \"Invalid component: invalid-component. Valid components are: [attributes, devices, floors, models, connections, users, attributesDictionary]\"}\n\n    Number of calls: 1\n\n      262 |\n      263 |       expect(mockResponse.status).toHaveBeenCalledWith(400)\n    > 264 |       expect(mockResponse.json).toHaveBeenCalledWith(\n          |                                 ^\n      265 |         expect.objectContaining({\n      266 |           error: expect.stringContaining('Invalid component')\n      267 |         })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:264:33)\n\n  ● Logs Controller › createLog › should sanitize input data\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"message\": {}}\n\n    Number of calls: 0\n\n      289 |\n      290 |       // Should sanitize the message object\n    > 291 |       expect(mockCollection.insertOne).toHaveBeenCalledWith(\n          |                                        ^\n      292 |         expect.objectContaining({\n      293 |           message: {} // $where should be removed by mongo-sanitize\n      294 |         })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:291:40)\n\n  ● Logs Controller › deleteLog › should delete log by valid ObjectId\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: {\"_id\": \"68d7abf642f129096df8bda8\"}\n\n    Number of calls: 0\n\n      310 |       await deleteLog(mockRequest, mockResponse, jest.fn())\n      311 |\n    > 312 |       expect(mockCollection.deleteOne).toHaveBeenCalledWith({\n          |                                        ^\n      313 |         _id: new ObjectId(logId)\n      314 |       })\n      315 |       expect(mockResponse.status).toHaveBeenCalledWith(200)\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:312:40)\n\n  ● Logs Controller › deleteLog › should return 404 when log not found\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 404\n    Received: 500\n\n    Number of calls: 1\n\n      331 |       await deleteLog(mockRequest, mockResponse, jest.fn())\n      332 |\n    > 333 |       expect(mockResponse.status).toHaveBeenCalledWith(404)\n          |                                   ^\n      334 |       expect(mockResponse.json).toHaveBeenCalledWith({\n      335 |         error: 'Log not found'\n      336 |       })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:333:35)\n\n  ● Logs Controller › deleteLog › should validate ObjectId format\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    - Expected\n    + Received\n\n      Object {\n    -   \"error\": \"Invalid ObjectId format\",\n    +   \"error\": \"Invalid ID format\",\n    +   \"message\": \"The provided ID is not a valid ObjectId\",\n      },\n\n    Number of calls: 1\n\n      343 |\n      344 |       expect(mockResponse.status).toHaveBeenCalledWith(400)\n    > 345 |       expect(mockResponse.json).toHaveBeenCalledWith({\n          |                                 ^\n      346 |         error: 'Invalid ObjectId format'\n      347 |       })\n      348 |     })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:345:33)\n\n  ● Logs Controller › deleteAllLogs › should delete all logs successfully\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: {}\n\n    Number of calls: 0\n\n      358 |       await deleteAllLogs(mockRequest, mockResponse, jest.fn())\n      359 |\n    > 360 |       expect(mockCollection.deleteMany).toHaveBeenCalledWith({})\n          |                                         ^\n      361 |       expect(mockResponse.status).toHaveBeenCalledWith(200)\n      362 |       expect(mockResponse.json).toHaveBeenCalledWith({\n      363 |         message: 'All logs deleted successfully',\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:360:41)\n\n  ● Logs Controller › deleteAllLogs › should handle case when no logs to delete\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: 200\n    Received: 400\n\n    Number of calls: 1\n\n      374 |       await deleteAllLogs(mockRequest, mockResponse, jest.fn())\n      375 |\n    > 376 |       expect(mockResponse.status).toHaveBeenCalledWith(200)\n          |                                   ^\n      377 |       expect(mockResponse.json).toHaveBeenCalledWith({\n      378 |         message: 'No logs found to delete',\n      379 |         deletedCount: 0\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:376:35)\n\n  ● Logs Controller › VALID_COMPONENTS › should be readonly array\n\n    expect(received).toThrow()\n\n    Received function did not throw\n\n      393 |       expect(() => {\n      394 |         ;(VALID_COMPONENTS as any).push('new-component')\n    > 395 |       }).toThrow()\n          |          ^\n      396 |     })\n      397 |   })\n      398 |\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:395:10)\n\n  ● Logs Controller › Log data structure validation › should validate log interface properties\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"string\"\n    Received: \"function\"\n\n      410 |       expect(log).toHaveProperty('userAgent')\n      411 |\n    > 412 |       expect(typeof log.action).toBe('string')\n          |                                 ^\n      413 |       expect(typeof log.entity).toBe('string')\n      414 |       expect(typeof log.entityId).toBe('string')\n      415 |       expect(typeof log.userId).toBe('string')\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:412:33)\n\n  ● Logs Controller › Log data structure validation › should have valid timestamp format\n\n    RangeError: Invalid time value\n        at Date.toISOString (<anonymous>)\n\n      424 |       // Should be a valid date object or string\n      425 |       expect(log.timestamp).toBeTruthy()\n    > 426 |       expect(new Date(log.timestamp as any).toISOString()).toBeTruthy()\n          |                                             ^\n      427 |     })\n      428 |\n      429 |     it('should have valid action from allowed list', () => {\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:426:45)\n\n  ● Logs Controller › Log data structure validation › should have valid action from allowed list\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: [Function action]\n    Received array: [\"CREATE\", \"UPDATE\", \"DELETE\", \"VIEW\"]\n\n      431 |       const validActions = ['CREATE', 'UPDATE', 'DELETE', 'VIEW']\n      432 |\n    > 433 |       expect(validActions).toContain(log.action)\n          |                            ^\n      434 |     })\n      435 |\n      436 |     it('should have valid entity from allowed list', () => {\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:433:28)\n\n  ● Logs Controller › Log data structure validation › should have valid entity from allowed list\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: [Function entity]\n    Received array: [\"device\", \"user\", \"connection\", \"model\"]\n\n      438 |       const validEntities = ['device', 'user', 'connection', 'model']\n      439 |\n    > 440 |       expect(validEntities).toContain(log.entity)\n          |                             ^\n      441 |     })\n      442 |   })\n      443 | })\n\n      at Object.<anonymous> (src/tests/logs.api.test.ts:440:29)\n\nJest: Uncovered count for statements (609) exceeds global threshold (10)\nJest: \"global\" coverage threshold for branches (80%) not met: 65.56%\nJest: \"global\" coverage threshold for lines (80%) not met: 70.22%\nJest: \"global\" coverage threshold for functions (80%) not met: 36.26%\nTest Suites: 1 failed, 5 passed, 6 of 17 total\nTests:       24 failed, 102 passed, 126 total\nSnapshots:   0 total\nTime:        21.547 s\n"
    },
    {
      "name": "Security Audit",
      "passed": true,
      "details": "0 vulnerabilities found"
    },
    {
      "name": "Dependencies",
      "passed": true,
      "details": "No unused dependencies"
    },
    {
      "name": "Build",
      "passed": true,
      "details": "Build successful"
    }
  ]
}
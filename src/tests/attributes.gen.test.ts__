/**
 * @file /home/karol/GitHub/3d-inventory-mongo-api/tests/attributes.gen.test.js
 * @module /tests
 * @description This file contains the test suite for preparing attributesDictionary and Attribute test data.
 * It imports necessary modules, connects to the database, and performs various tests to insert attributes and logs.
 * The tests include creating attributes dictionary, inserting attributes, and logging the operations.
 * This file is part of the 3D Inventory Mongo API project.
 * @version 2024-04-13 C2RLO - fix attributesDictionary and attributes tests convert to typescript
 * @version 2024-01-30 C2RLO - Initial
 */

import { faker } from '@faker-js/faker'
import { Collection, Db, MongoClient, ObjectId, OptionalId, WithId } from 'mongodb'
import '../utils/loadEnvironment.js'
import { AttributesDictionary } from '../routers/attributesDictionary.js'
import { capitalizeFirstLetter } from '../utils/strings.js'
import { Attributes } from '../routers/attributes.js'
import { AttributesTypes } from '../routers/attributesTypes.js'
import { Logs } from '../routers/logs.js'
import { Components } from '../routers/attributesTypes.js'

describe('prepare attributesDictionary and Attribute test data', () => {
  let connection: MongoClient
  let db: Db
  let mockLog: OptionalId<Logs>
  let attributes: Collection<Attributes[]>
  let attributesDictionary: Collection<AttributesDictionary[]>
  let attributesTypes: Collection<AttributesTypes[]>
  let logs: Collection<Logs[]>
  let components: Collection<Components[]>

  beforeAll(async () => {
    const atlasUri = process.env.ATLAS_URI || 'default-uri'
    connection = await MongoClient.connect(atlasUri, {})
    db = connection.db(process.env.DBNAME)

    attributes = db.collection<Attributes[]>('attributes')
    await attributes.deleteMany({})

    attributesDictionary = db.collection<AttributesDictionary[]>('attributesDictionary')
    await attributesDictionary.deleteMany({})
  })

  afterAll(async () => {
    await connection.close()
  })

  describe('create 3 attributes dictionary', () => {
    it('should insert a 3 attributes', async () => {
      logs = db.collection<Logs[]>('logs') // Assign a value to the 'logs' variable
      attributesDictionary = db.collection<AttributesDictionary[]>('attributesDictionary')
      attributes = db.collection<Attributes[]>('attributes')
      components = db.collection<Components[]>('components')

      const attributesDictionaryCount = await attributesDictionary.countDocuments()
      for (let i = 0; i < attributesDictionaryCount; i++) {
        const currentDateLogs = new Date()
        const attributesCategoryData: { name: string }[] = [] // Declare and initialize the 'attributesCategoryData' variable

        const attributesCategoryDataTyped: { name: string; _id: ObjectId }[] = attributesCategoryData.map((item: { name: string }) => ({
          name: item.name,
          _id: new ObjectId(),
        }))
        const insertedLog = await logs.findOne(mockLog)
        expect(insertedLog).toEqual(mockLog)

        let randomComponent = '' // Initialize with a default value

        if (['Devices', 'Connections', 'Models'].indexOf(randomComponent) > -1) {
          for (let j = 0; j < 3; j++) {
            let mockAttributes: OptionalId<Attributes> = {
              attributesDictionaryId: new ObjectId(attributesDictionary?._id),
              connectionId: new ObjectId(),
              deviceId: null,
              modelId: null,
              name: faker.color.human() + ' ' + faker.commerce.product() + ' ' + faker.color.human(),
              value: faker.commerce.productAdjective(),
            }
            let insertedAttributes: Attributes | null = null;

            await attributes.insertOne(mockAttributes as OptionalId<Attributes>);

            if (insertedAttributes) {
              const formattedDate = '2022-01-01'; // Declare and assign a valid value to the 'formattedDate' variable

              mockLog = {
                date: new Date(formattedDate).toISOString(),
                objectId: new ObjectId().toString(),
                operation: 'Create',
                component: 'Attributes',
                message: JSON.stringify(insertedAttributes),
              };
              if (randomComponent === 'Connections') {
                mockAttributes = {
                  attributesDictionaryId: new ObjectId(attributesDictionary?._id),
                  connectionId: new ObjectId(),
                  deviceId: null,
                  modelId: null,
                  name: faker.color.human() + ' ' + faker.commerce.product() + ' ' + faker.color.human(),
                  value: faker.commerce.productAdjective(),
                }

                await attributes.insertOne(mockAttributes as OptionalId<Attributes[]>)
                insertedAttributes = await (attributes as Collection<Attributes[]>).findOne(mockAttributes as OptionalId<Attributes[]>)

                expect(insertedAttributes).toBe(insertedAttributes)
              }

              if (insertedAttributes) {
                mockLog = {
                  date: new Date(formattedDate).toISOString(), // Add the 'date' property with a valid value
                  objectId: new ObjectId().toString(), // Convert the ObjectId to a string
                  operation: 'Create',
                  component: 'Attributes',
                  message: JSON.stringify(insertedAttributes), // Convert the 'insertedAttributes' object to a string
                };
              }

            if (randomComponent === 'Connections') {
              mockAttributes = {
                attributesDictionaryId: new ObjectId(attributesDictionary?._id),
                connectionId: new ObjectId(),
                deviceId: null,
                modelId: null,
                name: faker.color.human() + ' ' + faker.commerce.product() + ' ' + faker.color.human(),
                value: faker.commerce.productAdjective(),
              }

              await attributes.insertOne(mockAttributes as OptionalId<Attributes[]>)
              insertedAttributes = await (attributes as Collection<Attributes[]>).findOne(mockAttributes as OptionalId<Attributes[]>)

              expect(insertedAttributes).toBe(insertedAttributes)
            }

            if (insertedAttributes) {
              mockLog = {
                date: new Date(formattedDate).toISOString(), // Add the 'date' property with a valid value
                objectId: new ObjectId().toString(), // Convert the ObjectId to a string
                operation: 'Create',
                component: 'Attributes',
                message: JSON.stringify(insertedAttributes), // Convert the 'insertedAttributes' object to a string
              };
              await (logs as unknown as Collection<Logs>).insertOne(mockLog);
            }

            const insertedLog = (await logs.findOne(mockLog)) as unknown as Logs;
            expect(insertedLog).toEqual(mockLog);
          }
        }
      }
    })
  })
});

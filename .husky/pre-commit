#!/usr/bin/bash
# File:        /.husky/pre-commit
# Description: strict lint, format, type check and version bump before commit
# 2023-11-26  C2RLO    Initial
# 2025-09-20  Updated   Added comprehensive linting and formatting
# 2025-09-20  Enhanced  Added strict ESLint error checking - NO COMMITS WITH ESLINT ERRORS

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${PURPLE}🚫 STRICT MODE: No commits allowed with ESLint errors!${NC}"
echo -e "${BLUE}🔍 Running pre-commit checks...${NC}"

# Function to check if files exist
check_files() {
  if [ -z "$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|js)$')" ]; then
    echo -e "${YELLOW}⚠️  No TypeScript/JavaScript files to check${NC}"
    return 1
  fi
  return 0
}

# Check if there are staged TypeScript/JavaScript files
if check_files; then
  echo -e "${BLUE}📝 Found staged TypeScript/JavaScript files${NC}"

  # Run lint-staged for staged files
  echo -e "${BLUE}🧹 Running lint-staged...${NC}"
  npx lint-staged

  if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Lint-staged failed. Please fix the issues and try again.${NC}"
    exit 1
  fi

  echo -e "${GREEN}✅ Lint-staged completed successfully${NC}"

  # Run strict ESLint check on staged files to ensure no errors remain
  echo -e "${BLUE}🔍 Running strict ESLint check on staged files...${NC}"
  STAGED_TS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|js)$' | tr '\n' ' ')

  if [ -n "$STAGED_TS_FILES" ]; then
    npx eslint $STAGED_TS_FILES

    if [ $? -ne 0 ]; then
      echo -e "${RED}❌ ESLint errors found that cannot be auto-fixed!${NC}"
      echo -e "${RED}   Please fix all ESLint errors before committing.${NC}"
      echo -e "${BLUE}💡 Run 'npm run lint' to see all issues${NC}"
      exit 1
    fi

    echo -e "${GREEN}✅ No ESLint errors found in staged files${NC}"
  fi
else
  echo -e "${YELLOW}⏭️  Skipping lint checks (no relevant files staged)${NC}"
fi

# Run type checking on entire project
echo -e "${BLUE}🔍 Running TypeScript type check...${NC}"
npm run check:type

if [ $? -ne 0 ]; then
  echo -e "${RED}❌ TypeScript type check failed. Please fix the errors and try again.${NC}"
  exit 1
fi

echo -e "${GREEN}✅ TypeScript type check passed${NC}"

# Run comprehensive ESLint check on entire project
echo -e "${BLUE}🔍 Running comprehensive ESLint check...${NC}"
npm run lint:check

if [ $? -ne 0 ]; then
  echo -e "${RED}❌ ESLint errors found in the project!${NC}"
  echo -e "${RED}   Please fix all ESLint errors before committing.${NC}"
  echo -e "${BLUE}💡 Run 'npm run lint' to automatically fix issues${NC}"
  echo -e "${BLUE}💡 Run 'npm run lint:check' to see all remaining issues${NC}"
  exit 1
fi

echo -e "${GREEN}✅ No ESLint errors found in the project${NC}"

# Check for problematic test patterns
echo -e "${BLUE}🧪 Checking for problematic test patterns...${NC}"
STAGED_TEST_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.test\.ts$' | tr '\n' ' ')

if [ -n "$STAGED_TEST_FILES" ]; then
  # Check for jest.doMock pattern
  if grep -r "jest\.doMock" $STAGED_TEST_FILES 2>/dev/null; then
    echo -e "${RED}❌ Found jest.doMock() in test files!${NC}"
    echo -e "${RED}   This pattern causes test hanging issues.${NC}"
    echo -e "${BLUE}💡 Use jest.mock() at the top level instead${NC}"
    echo -e "${BLUE}💡 See docs/JEST-MONGODB-TESTING-GUIDE.md for proper patterns${NC}"
    exit 1
  fi

  # Check for dynamic imports without proper setup
  if grep -r "await import(" $STAGED_TEST_FILES 2>/dev/null | grep -v "\/\/" | grep -v "\/\*"; then
    echo -e "${YELLOW}⚠️  Found dynamic imports in test files${NC}"
    echo -e "${YELLOW}   This may cause performance issues or test hanging${NC}"
    echo -e "${BLUE}💡 Consider using static imports instead${NC}"
  fi

  echo -e "${GREEN}✅ Test pattern check passed${NC}"
else
  echo -e "${YELLOW}⏭️  No test files staged, skipping test pattern check${NC}"
fi

# Security audit check
echo -e "${BLUE}🔒 Running security audit...${NC}"
npm audit --audit-level=moderate

if [ $? -ne 0 ]; then
  echo -e "${YELLOW}⚠️  Security vulnerabilities detected. Consider running 'npm audit fix'${NC}"
  # Don't fail the commit for security issues, just warn
fi

echo -e "${GREEN}✅ Pre-commit checks completed successfully${NC}"

# Version bump (only for main branch commits)
BRANCH=$(git branch --show-current)
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
  echo -e "${BLUE}📦 Updating version (patch)...${NC}"
  npm --no-git-tag-version version patch
  git add package.json
  echo -e "${GREEN}✅ Version updated${NC}"
else
  echo -e "${YELLOW}⏭️  Skipping version bump (not on main branch)${NC}"
fi

echo -e "${GREEN}🎉 All pre-commit checks passed!${NC}"

openapi: 3.0.3
info:
  title: API for project 3d-inventory
  description: |-
    API **3d-inventory**. Project is a simple solution that allows you to build a spatial and database representation of all types of warehouses and server rooms.
    ## Resonses
    From [restfulapi.net site](https://restfulapi.net/http-status-codes)
    - 1xx Informational – Communicates transfer protocol-level information.
    - 2xx Success – Indicates that the client’s request was accepted successfully.
    - 3xx Redirection – Indicates that the client must take some additional action in order to complete their request.
    - 4xx Client Error – This category of error status codes points the finger at clients.
    - 5xx Server Error – The server takes responsibility for these error status codes.
  version: 0.0.6
  contact:
    name: 3d-inventory
    url: https://github.com/karol-preiskorn/3d-inventory-mongo-api/discussions
    email: h5xwmtlfp@mozmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/karol-preiskorn/3d-inventory-rest-api/0.0.6
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/karol-preiskorn/3d-inventory-oracle-api/1.0.5
  - url: "http://localhost:8080"
    description: 3d-inventory-oracle-api
  - url: https://virtserver.swaggerhub.com/karol-preiskorn/ultima-rest/1.0.3
    description: SwaggerHub API Auto Mocking

paths:
  /devices:
    get:
      summary: Get devices
      description: Get list devices.
      operationId: deviceGET
      responses:
        "200":
          description: List of devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Devices not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
      tags:
        - devices

    put:
      summary: "Update device"
      description: Update existing device.
      operationId: devicePUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Update not found device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - devices

    post:
      summary: Create new device
      description: Insert new device.
      operationId: devicePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
            example:
              $ref: "#/components/schemas/Device/example"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
              example:
                $ref: "#/components/schemas/Device/example"
        "500":
          description: Error device not created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
              example:
                $ref: "#/components/schemas/Error"
      tags:
        - devices

    delete:
      summary: Delete all devices
      description: Delete device.
      operationId: deviceDELETE
      responses:
        "200":
          description: OK
        "404":
          description: Not found device to delete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - devices

  /devices/{id}:
    get:
      summary: Get devices
      description: Get one devices.
      operationId: deviceGetOne
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Devices not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
      tags:
        - devices
    delete:
      summary: Delete selected devices
      description: Delete one device.
      operationId: deviceDeleteOne
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "404":
          description: Not found device to delete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - devices
  /logs:
    get:
      summary: Get logs from database
      description: Get all logs.
      operationId: logsGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
              examples:
                id:
                  value: "222"
                date:
                  value: "2023-03-12"
                message:
                  value: "Message in log"
        "404":
          description: No found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
      tags:
        - logs
    put:
      summary: Update new log
      description: Update log record.
      operationId: logPUT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
    post:
      summary: Insert new log
      description: Create log.
      operationId: logPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Log"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
              example:
                $ref: "#/components/schemas/Log/example"
        "500":
          description: Error log not created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
              example:
                $ref: "#/components/responses/500"
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
    delete:
      summary: Delete log
      description: Delete all or specific id log.
      operationId: logAllDelete
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
  /logs/{id}:
    delete:
      summary: Delete single log
      description: Delete specific id log.
      operationId: logSingleDelete
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
    get:
      summary: Get single log id
      description: Get specific id log.
      operationId: logSingleGet
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
  /logs/device/{id}:
    delete:
      summary: Delete devices log
      description: Delete specific device log.
      operationId: logDeviceDelete
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
    get:
      summary: Get device log
      description: Get specific device log.
      operationId: logDeviceGet
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
  /logs/connection/{id}:
    delete:
      summary: Delete devices logs
      description: Delete specific device logs.
      operationId: logConnectionDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
    get:
      summary: Get connection logs
      description: Get specific connection logs.
      operationId: logConnectionGet
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error logs not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
  /logs/attributes/{id}:
    delete:
      summary: Delete attributes logs
      description: Delete specific device logs.
      operationId: logAttributesDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
    get:
      summary: Get attributes logs
      description: Get specific attribute logs.
      operationId: logAttributesGet
      parameters:
        - name: id
          in: path
          description: ID of attribute to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          $ref: "#/components/responses/200"
      tags:
        - logs
  /logs/attribute-dictionary/{id}:
    delete:
      summary: Delete attribute-dictionary logs
      description: Delete specific attribute-dictionary logs.
      operationId: logAttributeDictionaryDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
    get:
      summary: Get attribute-dictionary logs
      description: Get specific attribute-dictionary logs.
      operationId: logAttributeDictionaryGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error logs not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      tags:
        - logs
  /connections:
    get:
      summary: >-
        Server heartbeat operation. Get information about connection between Devices.
      description: Get all connections between devices
      operationId: connectionsGet
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      tags:
        - connections
    put:
      summary: Update new connection beetween two devices
      description: Create connection beetween two devices. Two id and attributes from attributes.
      operationId: connectionPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connections"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
              example:
                $ref: "#/components/schemas/Connections/example"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
              example:
                $ref: "#/components/responses/500"
        "404":
          description: Not found connection data
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
      tags:
        - connections
    delete:
      summary: Delete connection
      description: Delete connection beetween two devices. Two id and attributes from attributes.
      operationId: connectionDELETE
      responses:
        "200":
          description: Ok
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
              example:
                $ref: "#/components/responses/500"
        "404":
          description: Not found connection to detete
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
      tags:
        - connections
    post:
      summary: Create new connection beetween two devices
      description: Create connection beetween two devices. Two id and attributes from attributes.
      operationId: connectionPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connections"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
              example:
                $ref: "#/components/schemas/Connections/example"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
              example:
                $ref: "#/components/responses/500"
        "404":
          description: Not found connection data
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
      tags:
        - connections
  /connections/{id}:
    get:
      summary: >-
        Server heartbeat operation. Get information about connection between Devices.
      description: Connection between devices
      operationId: connectionGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      tags:
        - connections
    delete:
      summary: Delete connections logs
      description: Delete specific connections logs.
      operationId: connectionDelete
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      tags:
        - connections
  /connections/device/{id}:
    get:
      summary: >-
        Server heartbeat operation. Get information about connection between Devices.
      description: Get connection for device
      operationId: connectionsDeviceGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      tags:
        - connections

  /attributes:
    get:
      summary: Get all atributtes
      description: 3d-inventory attributes from dictionary atributes
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "400":
          $ref: "#/components/responses/400"
      tags:
        - attributes
    post:
      summary: Create new Atributtes
      description: 3d-inventory attributes from dictionary atributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "400":
          $ref: "#/components/responses/400"
      tags:
        - attributes
    put:
      summary: Update new Atributtes beetween two devices
      description: Create Atributtes beetween two devices. Two id and attributes from attributes.
      operationId: attributesPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "404":
          $ref: "#/components/responses/404"
      tags:
        - attributes
    delete:
      summary: Update new Atributtes beetween two devices
      description: Create Atributtes beetween two devices. Two id and attributes from attributes.
      operationId: attributesDelete
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "404":
          $ref: "#/components/responses/404"
      tags:
        - attributes
  /attributes/device/{id}:
    get:
      summary: Get all atributtes for device
      description: 3d-inventory attributes from dictionary atributes
      operationId: attributesDeviceGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "400":
          $ref: "#/components/responses/400"
      tags:
        - attributes
  /attributes/model/{id}:
    get:
      summary: Get all atributtes for model id
      description: 3d-inventory attributes from dictionary atributes
      operationId: attributesModelGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "400":
          $ref: "#/components/responses/400"
      tags:
        - attributes
  /attribute-dictionary:
    get:
      summary: >-
        Server heartbeat operation. Get information about devices attributes types.
      description: Dictionary attributes types of specific type of device.
      operationId: attributeDictionaryGet
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "400":
          $ref: "#/components/responses/400"
      tags:
        - attribute-dictionary
    post:
      description: 3d-inventory attributes from dictionary atributes
      operationId: attributeDictionaryPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200"
        "500":
          $ref: "#/components/responses/500"
        "400":
          $ref: "#/components/responses/400"
      tags:
        - attribute-dictionary

  /models:
    get:
      summary: >-
        Devices models
      description: Dictionary models of device.
      operationId: modelsGet
      responses:
        "200":
          description: OK
      tags:
        - models
  /model/{id}:
    get:
      summary: >-
        Get model
      description: Dictionary models of device.
      operationId: modelGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
      tags:
        - models

  /floors:
    get:
      summary: >-
        Floors
      description: Floors data and atributes
      operationId: floorsGet
      responses:
        "200":
          description: OK
      tags:
        - floors

components:
  schemas:
    Attribute:
      type: object
      required:
        - _id
        - attributeDictionaryId
        - value
      properties:
        _id:
          type: string
          format: uuid
        deviceId:
          type: string
          format: uuid
        modelId:
          type: string
          format: uuid
        connectionId:
          type: string
          format: uuid
        attributeDictionaryId:
          type: string
          format: uuid
      example:
        _id: "653e10ecd6025afb66017c65"
        deviceId: "be5bb617-a614-435f-bf66-8768d0aba0c8"
        modelId: ""
        connectionId: ""
        attributeDictionaryId: "b324c94f-58a7-4e2e-a566-207024cb3485"
        value: "2"

    Position:
      type: object
      required:
        - x
        - y
        - z
      properties:
        x:
          type: number
        y:
          type: number
        z:
          type: number

    DeviceCore:
      type: object
      required:
        - _id
        - name
        - modelId
      properties:
        _id:
          type: string
          description: "Device ObjectId"
        name:
          type: string
          description: "Device name"
        modelId:
          type: string
          description: "Device model ObjectId"

    Device:
      allOf:
        - $ref: "#/components/schemas/DeviceCore"
        - $ref: "#/components/schemas/Position"

      example:
        _id: "653d6b95a75c2fa12566815c"
        name: "Device 2 (new2)"
        position:
          x: "4"
          y: "3"
          h: "0"
        modelId: "653e1059d6025afb66017c63"
      description: "Device"

    Connections:
      type: object
      required:
        - _id
        - name
        - deviceIdTo
        - deviceIdFrom
      properties:
        _id:
          type: string
          description: "Connection id uuid"
        name:
          type: string
          description: "Connection name"
        deviceIdTo:
          type: string
          description: "Connection to"
        deviceIdFrom:
          type: string
          description: "Connection from"
      example:
        _id: "91601de6-6e93-11ed-a1eb-0242ac120002"
        name: "device-A1"
        deviceIdFrom: "5f8abd81-0d35-47c4-8277-3d6bbbe185f0"
        deviceIdTo: "be5bb617-a614-435f-bf66-8768d0aba0c8"
      description: "Connection"

    Error:
      type: object
      properties:
        errNum:
          type: string
        message:
          type: string
        offset:
          type: string
      example:
        errNum: "404"
        message: "Error example app not work..."
        offset: "line 10022"
      description: "Universal Oracle error logs from database"

    Log:
      type: object
      required:
        - _id
        - date
        - message
      properties:
        id:
          type: string
          description: "Incremental log Id"
        date:
          type: string
          description: "Date as string"
        message:
          type: string
          description: "Log message"
      example:
        id: "102"
        date: "2023-03-12 14:00"
        message: "Message in log"
      description: "Save information about application upstage"

  responses:
    "200":
      description: OK. Indicates that the request has succeeded.
    "400":
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "405":
      description:
        Method Not Allowed. The request HTTP method is known by the server but has been disabled and cannot be used
        for that resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description:
        Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
        the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "501":
      description: Not Implemented. The HTTP method is not supported by the server and cannot be handled.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "502":
      description:
        Bad getway. The server got an invalid response while working as a gateway to get the response needed to
        handle the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "503":
      description: Service Unavailable. The server is not ready to handle the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "504":
      description:
        Gateway Timeout. The server is acting as a gateway and cannot get a response in time for a request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
tags:
  - name: logs
    description: Group Logs API
  - name: devices
    description: Group Devices API
  - name: models
    description: Group Models API
  - name: connections
    description: Group Connections API
  - name: attributes
    description: Group Attributes API
  - name: attribute-dictionary
    description: Group Attributes Dictionary API

externalDocs:
  description: https://ultimasolution.pl/
  url: https://ultimasolution.pl/

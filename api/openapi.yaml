openapi: 3.0.3
info:
  title: API for project 3d-inventory
  description: "API **3d-inventory**. Project is a simple solution that allows you\
    \ to build a spatial and database representation of all types of warehouses and\
    \ server rooms. \n### Responses\nFrom [restfulapi.net site](https://restfulapi.net/http-status-codes)\n\
    - 1xx Informational – Communicates transfer protocol-level information.\n- 2xx\
    \ Success – Indicates that the client’s request was accepted successfully. \n\
    - 3xx Redirection – Indicates that the client must take some additional action\
    \ in order to complete their request. \n- 4xx Client Error – This category of\
    \ error status codes points the finger at clients. \n- 5xx Server Error – The\
    \ server takes responsibility for these error status codes."
  contact:
    name: 3d-inventory
    url: https://github.com/karol-preiskorn/3d-inventory-mongo-api/discussions
    email: h5xwmtlfp@mozmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.6
externalDocs:
  description: https://ultimasolution.pl/
  url: https://ultimasolution.pl/
servers:
  - url: https://virtserver.swaggerhub.com/karol-preiskorn/3d-inventory-rest-api/0.0.6
    description: SwaggerHub API Auto Mocking
  - url: http://localhost:8080
    description: localhost api 3d-inventory-oracle-api
tags:
  - name: logs
    description: Group Logs API
  - name: devices
    description: Group Devices API
  - name: models
    description: Group Models API
  - name: connections
    description: Group Connections API
  - name: attributes
    description: Group Attributes API
  - name: attributeDictionary
    description: Group Attributes Dictionary API
  - name: floors
    description: Group Floors API
paths:
  /devices:
    get:
      tags:
        - devices
      summary: Get all devices
      description: List all devices.
      operationId: deviceGET
      responses:
        "200":
          description: List of devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Devices"
        "404":
          description: Devices not found
      x-swagger-router-controller: Devices
    put:
      tags:
        - devices
      summary: Update device
      description: Update existing device.
      operationId: devicePUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Update not found device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Devices
    post:
      tags:
        - devices
      summary: Create new device
      description: Insert new device.
      operationId: devicePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
            example:
              $ref: "#/components/schemas/Device/example"
      responses:
        "200":
          description: A devices id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "500":
          description: Error device not created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Devices
    delete:
      tags:
        - devices
      summary: Delete all devices
      description: Delete device.
      operationId: deviceDELETE
      responses:
        "200":
          description: OK
        "404":
          description: Not found device to delete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Devices
  /devices/{id}:
    get:
      tags:
        - devices
      summary: Get devices
      description: Get one devices.
      operationId: deviceGetOne
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "404":
          description: Devices not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
      x-swagger-router-controller: Devices
    delete:
      tags:
        - devices
      summary: Delete selected devices
      description: Delete one device.
      operationId: deviceDeleteOne
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "404":
          description: Not found device to delete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Devices
  /logs:
    get:
      tags:
        - logs
      summary: Get logs from database
      description: Get all logs.
      operationId: logsGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
              example:
                $ref: "#/components/schemas/Logs/example"
        "404":
          description: No found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
      x-swagger-router-controller: Logs
    put:
      tags:
        - logs
      summary: Update new log
      description: Update log record.
      operationId: logPUT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
    post:
      tags:
        - logs
      summary: Insert new log
      description: Create log.
      operationId: logPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Log"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
              example:
                $ref: "#/components/schemas/Log/example"
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "500":
          description: Error log not created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
              example:
                $ref: "#/components/responses/500"
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete log
      description: Delete all or specific id log.
      operationId: logAllDelete
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
  /logs/{id}:
    get:
      tags:
        - logs
      summary: Get single log id
      description: Get specific id log.
      operationId: logSingleGet
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete single log
      description: Delete specific id log.
      operationId: logSingleDelete
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
  /logs/device/{id}:
    get:
      tags:
        - logs
      summary: Get device log
      description: Get specific device log.
      operationId: logDeviceGet
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete devices log
      description: Delete specific device log.
      operationId: logDeviceDelete
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
  /logs/connection/{id}:
    get:
      tags:
        - logs
      summary: Get connection logs
      description: Get specific connection logs.
      operationId: logConnectionGet
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error logs not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete devices logs
      description: Delete specific device logs.
      operationId: logConnectionDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
  /logs/attributes/{id}:
    get:
      tags:
        - logs
      summary: Get attributes logs
      description: Get specific attribute logs.
      operationId: logAttributesGet
      parameters:
        - name: id
          in: path
          description: ID of attribute to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete attributes logs
      description: Delete specific device logs.
      operationId: logAttributesDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
  /logs/attribute-dictionary/{id}:
    get:
      tags:
        - logs
      summary: Get attribute-dictionary logs
      description: Get specific attribute-dictionary logs.
      operationId: logAttributeDictionaryGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error logs not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
    delete:
      tags:
        - logs
      summary: Delete attribute-dictionary logs
      description: Delete specific attribute-dictionary logs.
      operationId: logAttributeDictionaryDelete
      parameters:
        - name: id
          in: path
          description: ID of logs to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
      x-swagger-router-controller: Logs
  /connections:
    get:
      tags:
        - connections
      summary: Server heartbeat operation. Get information about connection between Devices.
      description: Get all connections between devices
      operationId: connectionsGet
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
    put:
      tags:
        - connections
      summary: Update new connection beetween two devices
      description: Create connection beetween two devices. Two id and attributes from attributes.
      operationId: connectionPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connections"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
              example:
                $ref: "#/components/schemas/Connection/example"
        "404":
          description: Not found connection data
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
              example:
                $ref: "#/components/responses/500"
      x-swagger-router-controller: Connections
    post:
      tags:
        - connections
      summary: Create new connection beetween two devices
      description: Create connection beetween two devices. Two id and attributes from attributes.
      operationId: connectionPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connections"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
              example:
                $ref: "#/components/schemas/Connection/example"
        "404":
          description: Not found connection data
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
              example:
                $ref: "#/components/responses/500"
      x-swagger-router-controller: Connections
    delete:
      tags:
        - connections
      summary: Delete connection
      description: Delete connection beetween two devices. Two id and attributes from attributes.
      operationId: connectionDELETE
      responses:
        "200":
          description: Ok
        "404":
          description: Not found connection to detete
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404"
        "500":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/500"
              example:
                $ref: "#/components/responses/500"
      x-swagger-router-controller: Connections
  /connections/{id}:
    get:
      tags:
        - connections
      summary: Get information about one Connection.
      description: Connection between devices
      operationId: connectionGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
    delete:
      tags:
        - connections
      summary: Delete connections logs
      description: Delete specific connections logs.
      operationId: connectionDelete
      parameters:
        - name: id
          in: path
          description: ID of connection to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "404":
          description: Error log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
  /connections/device/{id}:
    get:
      tags:
        - connections
      summary: Get information about Connections between Devices.
      description: Get connection for device
      operationId: connectionsDeviceGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success get connection between devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connections"
      x-swagger-router-controller: Connections
  /attributes:
    get:
      tags:
        - attributes
      summary: Get all attributes
      description: 3d-inventory attributes from dictionary attributes
      operationId: attributesGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attributes"
              example:
                $ref: "#/components/schemas/Attributes/example"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Attributes
    put:
      tags:
        - attributes
      summary: Update new Attributes beetween two devices
      description: Create Attributes beetween two devices. Two id and attributes from attributes.
      operationId: attributesPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Attributes
    post:
      tags:
        - attributes
      summary: Create new Attributes
      description: 3d-inventory attributes from dictionary attributes
      operationId: attributesPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Attributes
    delete:
      tags:
        - attributes
      summary: Update new Attributes beetween two devices
      description: Create Attributes beetween two devices. Two id and attributes from attributes.
      operationId: attributesDelete
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Attributes
  /attributes/device/{id}:
    get:
      tags:
        - attributes
      summary: Get all Attributes for device
      description: 3d-inventory attributes from dictionary attributes
      operationId: attributesDeviceGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Attributes
  /attributes/model/{id}:
    get:
      tags:
        - attributes
      summary: Get all Attributes for model id
      description: 3d-inventory attributes from dictionary attributes
      operationId: attributesModelGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Attributes
  /attribute-dictionary:
    get:
      tags:
        - attributeDictionary
      summary: Get information about devices attributes types.
      description: Dictionary attributes types for device and models. Store information about extra parmaeters.
      operationId: attributeDictionaryGet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeDictionaries"
              example:
                $ref: "#/components/schemas/AttributeDictionaries/example"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
    put:
      tags:
        - attributeDictionary
      summary: Update new atributte-dictionary
      description: Create attribute-dictionary beetween two devices. Two id and attributes from attributes.
      operationId: attributeDictionaryPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeDictionary"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
    post:
      tags:
        - attributeDictionary
      summary: Create devices attributes types.
      description: 3d-inventory attributes from dictionary attributes
      operationId: attributeDictionaryPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeDictionary"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
    delete:
      tags:
        - attributeDictionary
      summary: Delete all attributeDictionary
      description: Create Attributes beetween two devices. Two id and attributes from attributes.
      operationId: attributeDictionaryDelete
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
  /attribute-dictionary/connection:
    get:
      tags:
        - attributeDictionary
      summary: Get information about devices attributes for connection.
      description: Dictionary attributes dictionary for connection.
      operationId: attributeDictionaryConnectionGet
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
  /attribute-dictionary/models:
    get:
      tags:
        - attributeDictionary
      summary: Get information about devices attributes for models.
      description: Dictionary attributes dictionary for models.
      operationId: attributeDictionaryModelsGet
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
  /attribute-dictionary/devices:
    get:
      tags:
        - attributeDictionary
      summary: Get information about devices attributes for models.
      description: Dictionary attributes dictionary for models.
      operationId: attributeDictionaryDevicesGet
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
  /attribute-dictionary/connections:
    get:
      tags:
        - attributeDictionary
      summary: Get information about devices attributes for connections.
      description: Dictionary attributes dictionary for connections.
      operationId: attributeDictionaryConnectionsGet
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: AttributeDictionary
  /models:
    get:
      tags:
        - models
      summary: Devices models
      description: Dictionary models of device.
      operationId: modelsGet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models"
              example:
                $ref: "#/components/schemas/Models/example"
      x-swagger-router-controller: Models
    put:
      tags:
        - models
      summary: Update model
      description: Update single model
      operationId: modelsPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Models
    post:
      tags:
        - models
      summary: Create devices attributes types.
      description: Create dictionary models of device.
      operationId: modelsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Models
    delete:
      tags:
        - models
      summary: Delete all models
      description: Delete all models
      operationId: modelsDelete
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Models
  /model/{id}:
    get:
      tags:
        - models
      summary: Get model
      description: Dictionary models of device.
      operationId: modelGet
      parameters:
        - name: id
          in: path
          description: ID of attribute-dictionary to fetch logs
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Floors"
      x-swagger-router-controller: Models
  /floors:
    get:
      tags:
        - floors
      summary: "Floors "
      description: Floors data and attributes
      operationId: floorsGet
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Floors
    put:
      tags:
        - floors
      summary: Update new atributte-dictionary
      description: Create attribute-dictionary beetween two devices. Two id and attributes from attributes.
      operationId: floorPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Floor"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Floors
    post:
      tags:
        - floors
      summary: Create devices attributes types.
      description: 3d-inventory attributes from dictionary attributes
      operationId: floorPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Floor"
        required: true
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Floors
    delete:
      tags:
        - floors
      summary: Delete all attribute-dictionary
      description: Create Attributes beetween two devices. Two id and attributes from attributes.
      operationId: floorDelete
      responses:
        "200":
          description: OK. Indicates that the request has succeeded.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description:
            Unexpected server error. The server encountered an unexpected condition that prevented it from
            fulfilling the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-swagger-router-controller: Floors
  /floors/{id}:
    get:
      tags:
        - floors
      summary: "Get the single floor "
      description: Get single foor
      operationId: floorIdGet
      parameters:
        - name: id
          in: path
          description: ID of foor to fetch
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Floor"
      x-swagger-router-controller: Floors
components:
  schemas:
    Floor:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        adress:
          $ref: "#/components/schemas/Floor_adress"
        array:
          $ref: "#/components/schemas/Floor_array"
      description: Floor object
      example:
        _id: 653e120577c067b6abbe5d26
        name: Konopelski - Walter - incentivize global 2222
        adress:
          street: Zion Valleys 86789
          city: Paradise
          country: Papua New Guinea
          postcode: 05649-8267
        dimension:
          description: "Koss, Powlowski and Sipes - leverage out-of-the-box schemas\
            \ dasd"
          x: "54"
          "y": "58"
          h: "6"
          x_pos: "76"
          y_pos: "70"
          h_pos: "23"
    Floors:
      type: array
      description: Array of Floor
      items:
        $ref: "#/components/schemas/Floor"
    Dimension:
      type: object
      properties:
        depth:
          type: number
        height:
          type: number
        width:
          type: number
      example:
        width: "1"
        height: "2"
        depth: "2"
    Texture:
      type: object
      properties:
        back:
          type: string
          format: uri
        botom:
          type: string
          format: uri
        front:
          type: string
          format: uri
        side:
          type: string
          format: uri
        top:
          type: string
          format: uri
      example:
        front: /assets/r710-2.5-nobezel__29341.png
        back: /assets/r710-2.5-nobezel__29341.png
        side: /assets/r710-2.5-nobezel__29341.png
        top: /assets/r710-2.5-nobezel__29341.png
        botom: /assets/r710-2.5-nobezel__29341.png
    Model:
      required:
        - _id
        - category
        - name
        - type
      type: object
      properties:
        _id:
          type: string
          format: uuid
        category?:
          type: string
        dimension:
          $ref: "#/components/schemas/Dimension"
        name:
          type: string
        texture:
          $ref: "#/components/schemas/Texture"
        type:
          type: string
      description: Object of Models
      example:
        _id: 653e1059d6025afb66017c63
        name: Model 1
        dimension:
          width: "1"
          height: "2"
          depth: "2"
        texture:
          front: /assets/r710-2.5-nobezel__29341.png
          back: /assets/r710-2.5-nobezel__29341.png
          side: /assets/r710-2.5-nobezel__29341.png
          top: /assets/r710-2.5-nobezel__29341.png
          botom: /assets/r710-2.5-nobezel__29341.png
        type: CoolAir
        category: Facility
    Models:
      type: array
      description: Array of Models
      example:
        type: array
        items:
          $ref: "#/components/schemas/Model/example"
      items:
        $ref: "#/components/schemas/Model"
    AttributeDictionary:
      required:
        - _id
        - category
        - component
        - name
        - type
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        category:
          type: string
        component:
          type: string
          enum:
            - Devices
            - Models
            - Attrtibutes
            - AttributesDictionary
            - Connections
            - Floors
      example:
        _id: 653e10ecd6025afb66017c65
        name: MaxAmount
        type: ""
        category: ""
        component: b324c94f-58a7-4e2e-a566-207024cb3485
    AttributeDictionaries:
      type: array
      description: List of Attribute Dictionary
      example:
        - _id: 653e10ecd6025afb66017c65
          name: MaxAmount
          type: ""
          category: ""
          component: b324c94f-58a7-4e2e-a566-207024cb3485
        - _id: 653e10ecd6025afb66017c65
          name: MaxAmount
          type: ""
          category: ""
          component: b324c94f-58a7-4e2e-a566-207024cb3485
      items:
        $ref: "#/components/schemas/AttributeDictionary"
    Attribute:
      required:
        - _id
        - attributeDictionaryId
        - value
      type: object
      properties:
        _id:
          type: string
          format: uuid
        deviceId:
          type: string
          format: uuid
        modelId:
          type: string
          format: uuid
        connectionId:
          type: string
          format: uuid
        attributeDictionaryId:
          type: string
          format: uuid
        value:
          type: string
      example:
        _id: 653e10ecd6025afb66017c65
        deviceId: be5bb617-a614-435f-bf66-8768d0aba0c8
        modelId: ""
        connectionId: ""
        attributeDictionaryId: "b324c94f-58a7-4e2e-a566-207024cb3485"
        value: "2"
    Attributes:
      type: array
      description: List of attributes
      example:
        - _id: "653e10ecd6025afb66017c65"
          deviceId: "be5bb617-a614-435f-bf66-8768d0aba0c8"
          modelId: ""
          connectionId: ""
          attributeDictionaryId: "b324c94f-58a7-4e2e-a566-207024cb3485"
          value: "2"
        - _id: "1234erdsfdasdasdasd17c65"
          deviceId: "be5basd7-a614-435f-bf66-8768d0aba0c8"
          modelId: "be5basd7-a614-435f-bfas-8768d0asdasd"
          connectionId: ""
          attributeDictionaryId: ""
          value: "2"
      items:
        $ref: "#/components/schemas/Attribute"

    Position:
      required:
        - x
        - y
        - h
      type: object
      properties:
        x:
          type: number
          description: Width
        y:
          type: number
          description: Depth
        h:
          type: number
          description: Height
      description: Position device on the floor

    Device:
      required:
        - _id
        - modelId
        - name
      type: object
      properties:
        _id:
          type: string
          format: uuid
          description: Device ObjectId
        name:
          type: string
          description: Device name
        modelId:
          type: string
          format: uuid
          description: Device model ObjectId
        position:
          $ref: "#/components/schemas/Position"
      description: Device it is basic structure 3d-inventory
      example:
        _id: 653d6b95a75c2fa12566815c
        name: Device 2 (new2)
        position:
          x: "4"
          y: "3"
          h: "0"
        modelId: 653e1059d6025afb66017c63
    Devices:
      type: array
      description: Array of Devices
      items:
        $ref: "#/components/schemas/Device"
    Connection:
      required:
        - _id
        - deviceIdFrom
        - deviceIdTo
        - name
      type: object
      properties:
        _id:
          type: string
          description: Connection id uuid
        name:
          type: string
          description: Connection name
        deviceIdTo:
          type: string
          description: Connection to
          format: uuid
        deviceIdFrom:
          type: string
          description: Connection from
          format: uuid
      description: Single Connection betweend two devices deviceIdFrom to deviceIdTo
      example:
        _id: 91601de6-6e93-11ed-a1eb-0242ac120002
        name: device-A1
        deviceIdFrom: 5f8abd81-0d35-47c4-8277-3d6bbbe185f0
        deviceIdTo: be5bb617-a614-435f-bf66-8768d0aba0c8
    Connections:
      type: array
      description: Array of Connections
      items:
        $ref: "#/components/schemas/Connection"
    Error:
      type: object
      properties:
        errNum:
          type: number
        message:
          type: string
        offset:
          type: string
      description: Universal Oracle error logs from database
      example:
        errNum: "404"
        message: Error example app not work...
        offset: line 10022
    Log:
      required:
        - _id
        - component
        - date
        - message
        - object
        - operation
      type: object
      properties:
        _id:
          type: string
          description: UUID of log
          format: uuid
        date:
          type: string
          description: Date as string
        object:
          type: string
          description: UUID logged object
          format: uuid
        operation:
          type: string
          description: CRUD CREATE/UPDATE/DELETE
        component:
          type: string
          description: "Device, Connection, Model, Floor"
        message:
          type: string
          description: Log message
      description: Save information about all application upstage
      example:
        _id: "102"
        date: 2023/06/17 15:37:58.44
        object: dfc93d99-72ca-411e-a4e5-b38d5034b1c5
        operation: Update
        component: Device
        message: Message in log
    Logs:
      type: array
      description: Array of Logs
      example:
        - _id: "102"
          date: 2023/06/17 15:37:58.44
          object: dfc93d99-72ca-411e-a4e5-b38d5034b1c5
          operation: Update
          component: Device
          message: Message in log
        - _id: "103"
          date: 2023/02/27 10:37:58.44
          object: dfc93d99-72ca-411e-a4e5-b38d5034b1c6
          operation: Update
          component: Device
          message: Message in log
        - _id: "104"
          date: 2022/01/17 11:37:58.44
          object: dfc93d99-72ca-411e-a4e5-b38d5034b1c8
          operation: Update
          component: Device
          message: Message in log
      items:
        $ref: "#/components/schemas/Log"
    inline_response_200:
      type: object
      properties:
        id:
          type: string
          description: The device ID.
          format: uuid
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    Floor_adress:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        country:
          type: string
        postcode:
          type: string
    Floor_array:
      type: object
      properties:
        description:
          type: string
        x:
          type: number
        "y":
          type: number
        h:
          type: number
        xPos:
          type: number
        yPos:
          type: number
        hPos:
          type: number
  responses:
    "200":
      description: OK. Indicates that the request has succeeded.
    "400":
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "405":
      description:
        Method Not Allowed. The request HTTP method is known by the server but has been disabled and cannot be used
        for that resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description:
        Unexpected server error. The server encountered an unexpected condition that prevented it from fulfilling
        the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "501":
      description: Not Implemented. The HTTP method is not supported by the server and cannot be handled.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "502":
      description:
        Bad getway. The server got an invalid response while working as a gateway to get the response needed to
        handle the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "503":
      description: Service Unavailable. The server is not ready to handle the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "504":
      description:
        Gateway Timeout. The server is acting as a gateway and cannot get a response in time for a request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
